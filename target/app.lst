
target/release/app: formato do arquivo elf64-x86-64

Seções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000318  0000000000000318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000030  0000000000000338  0000000000000338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000368  0000000000000368  00000368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000000038c  000000000000038c  0000038c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000028  00000000000003b0  00000000000003b0  000003b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       000003c0  00000000000003d8  00000000000003d8  000003d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000272  0000000000000798  0000000000000798  00000798  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  00000050  0000000000000a0a  0000000000000a0a  00000a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000050  0000000000000a60  0000000000000a60  00000a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     000000c0  0000000000000ab0  0000000000000ab0  00000ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000318  0000000000000b70  0000000000000b70  00000b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000001000  0000000000001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          00000220  0000000000001020  0000000000001020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .plt.got      00000010  0000000000001240  0000000000001240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .plt.sec      00000210  0000000000001250  0000000000001250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text         000011e9  0000000000001460  0000000000001460  00001460  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .fini         0000000d  000000000000264c  000000000000264c  0000264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       000005b8  0000000000003000  0000000000003000  00003000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .eh_frame_hdr 00000094  00000000000035b8  00000000000035b8  000035b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .eh_frame     000002ec  0000000000003650  0000000000003650  00003650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .init_array   00000008  0000000000004ca8  0000000000004ca8  00003ca8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .fini_array   00000008  0000000000004cb0  0000000000004cb0  00003cb0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      00000200  0000000000004cb8  0000000000004cb8  00003cb8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          00000148  0000000000004eb8  0000000000004eb8  00003eb8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         00000010  0000000000005000  0000000000005000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000090  0000000000005020  0000000000005020  00004010  2**5
                  ALLOC
 26 .comment      0000002b  0000000000000000  0000000000000000  00004010  2**0
                  CONTENTS, READONLY
 27 .debug_aranges 00000070  0000000000000000  0000000000000000  0000403b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   0000858e  0000000000000000  0000000000000000  000040ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 0000092e  0000000000000000  0000000000000000  0000c639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   000010d6  0000000000000000  0000000000000000  0000cf67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    00003f69  0000000000000000  0000000000000000  0000e03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line_str 00000367  0000000000000000  0000000000000000  00011fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_loclists 00000736  0000000000000000  0000000000000000  0001230d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_rnglists 0000016a  0000000000000000  0000000000000000  00012a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da seção .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 e1 3f 00 00 	mov    0x3fe1(%rip),%rax        # 4ff0 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret

Desmontagem da seção .plt:

0000000000001020 <.plt>:
    1020:	ff 35 9a 3e 00 00    	push   0x3e9a(%rip)        # 4ec0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 9c 3e 00 00    	jmp    *0x3e9c(%rip)        # 4ec8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)
    1030:	f3 0f 1e fa          	endbr64
    1034:	68 00 00 00 00       	push   $0x0
    1039:	e9 e2 ff ff ff       	jmp    1020 <_init+0x20>
    103e:	66 90                	xchg   %ax,%ax
    1040:	f3 0f 1e fa          	endbr64
    1044:	68 01 00 00 00       	push   $0x1
    1049:	e9 d2 ff ff ff       	jmp    1020 <_init+0x20>
    104e:	66 90                	xchg   %ax,%ax
    1050:	f3 0f 1e fa          	endbr64
    1054:	68 02 00 00 00       	push   $0x2
    1059:	e9 c2 ff ff ff       	jmp    1020 <_init+0x20>
    105e:	66 90                	xchg   %ax,%ax
    1060:	f3 0f 1e fa          	endbr64
    1064:	68 03 00 00 00       	push   $0x3
    1069:	e9 b2 ff ff ff       	jmp    1020 <_init+0x20>
    106e:	66 90                	xchg   %ax,%ax
    1070:	f3 0f 1e fa          	endbr64
    1074:	68 04 00 00 00       	push   $0x4
    1079:	e9 a2 ff ff ff       	jmp    1020 <_init+0x20>
    107e:	66 90                	xchg   %ax,%ax
    1080:	f3 0f 1e fa          	endbr64
    1084:	68 05 00 00 00       	push   $0x5
    1089:	e9 92 ff ff ff       	jmp    1020 <_init+0x20>
    108e:	66 90                	xchg   %ax,%ax
    1090:	f3 0f 1e fa          	endbr64
    1094:	68 06 00 00 00       	push   $0x6
    1099:	e9 82 ff ff ff       	jmp    1020 <_init+0x20>
    109e:	66 90                	xchg   %ax,%ax
    10a0:	f3 0f 1e fa          	endbr64
    10a4:	68 07 00 00 00       	push   $0x7
    10a9:	e9 72 ff ff ff       	jmp    1020 <_init+0x20>
    10ae:	66 90                	xchg   %ax,%ax
    10b0:	f3 0f 1e fa          	endbr64
    10b4:	68 08 00 00 00       	push   $0x8
    10b9:	e9 62 ff ff ff       	jmp    1020 <_init+0x20>
    10be:	66 90                	xchg   %ax,%ax
    10c0:	f3 0f 1e fa          	endbr64
    10c4:	68 09 00 00 00       	push   $0x9
    10c9:	e9 52 ff ff ff       	jmp    1020 <_init+0x20>
    10ce:	66 90                	xchg   %ax,%ax
    10d0:	f3 0f 1e fa          	endbr64
    10d4:	68 0a 00 00 00       	push   $0xa
    10d9:	e9 42 ff ff ff       	jmp    1020 <_init+0x20>
    10de:	66 90                	xchg   %ax,%ax
    10e0:	f3 0f 1e fa          	endbr64
    10e4:	68 0b 00 00 00       	push   $0xb
    10e9:	e9 32 ff ff ff       	jmp    1020 <_init+0x20>
    10ee:	66 90                	xchg   %ax,%ax
    10f0:	f3 0f 1e fa          	endbr64
    10f4:	68 0c 00 00 00       	push   $0xc
    10f9:	e9 22 ff ff ff       	jmp    1020 <_init+0x20>
    10fe:	66 90                	xchg   %ax,%ax
    1100:	f3 0f 1e fa          	endbr64
    1104:	68 0d 00 00 00       	push   $0xd
    1109:	e9 12 ff ff ff       	jmp    1020 <_init+0x20>
    110e:	66 90                	xchg   %ax,%ax
    1110:	f3 0f 1e fa          	endbr64
    1114:	68 0e 00 00 00       	push   $0xe
    1119:	e9 02 ff ff ff       	jmp    1020 <_init+0x20>
    111e:	66 90                	xchg   %ax,%ax
    1120:	f3 0f 1e fa          	endbr64
    1124:	68 0f 00 00 00       	push   $0xf
    1129:	e9 f2 fe ff ff       	jmp    1020 <_init+0x20>
    112e:	66 90                	xchg   %ax,%ax
    1130:	f3 0f 1e fa          	endbr64
    1134:	68 10 00 00 00       	push   $0x10
    1139:	e9 e2 fe ff ff       	jmp    1020 <_init+0x20>
    113e:	66 90                	xchg   %ax,%ax
    1140:	f3 0f 1e fa          	endbr64
    1144:	68 11 00 00 00       	push   $0x11
    1149:	e9 d2 fe ff ff       	jmp    1020 <_init+0x20>
    114e:	66 90                	xchg   %ax,%ax
    1150:	f3 0f 1e fa          	endbr64
    1154:	68 12 00 00 00       	push   $0x12
    1159:	e9 c2 fe ff ff       	jmp    1020 <_init+0x20>
    115e:	66 90                	xchg   %ax,%ax
    1160:	f3 0f 1e fa          	endbr64
    1164:	68 13 00 00 00       	push   $0x13
    1169:	e9 b2 fe ff ff       	jmp    1020 <_init+0x20>
    116e:	66 90                	xchg   %ax,%ax
    1170:	f3 0f 1e fa          	endbr64
    1174:	68 14 00 00 00       	push   $0x14
    1179:	e9 a2 fe ff ff       	jmp    1020 <_init+0x20>
    117e:	66 90                	xchg   %ax,%ax
    1180:	f3 0f 1e fa          	endbr64
    1184:	68 15 00 00 00       	push   $0x15
    1189:	e9 92 fe ff ff       	jmp    1020 <_init+0x20>
    118e:	66 90                	xchg   %ax,%ax
    1190:	f3 0f 1e fa          	endbr64
    1194:	68 16 00 00 00       	push   $0x16
    1199:	e9 82 fe ff ff       	jmp    1020 <_init+0x20>
    119e:	66 90                	xchg   %ax,%ax
    11a0:	f3 0f 1e fa          	endbr64
    11a4:	68 17 00 00 00       	push   $0x17
    11a9:	e9 72 fe ff ff       	jmp    1020 <_init+0x20>
    11ae:	66 90                	xchg   %ax,%ax
    11b0:	f3 0f 1e fa          	endbr64
    11b4:	68 18 00 00 00       	push   $0x18
    11b9:	e9 62 fe ff ff       	jmp    1020 <_init+0x20>
    11be:	66 90                	xchg   %ax,%ax
    11c0:	f3 0f 1e fa          	endbr64
    11c4:	68 19 00 00 00       	push   $0x19
    11c9:	e9 52 fe ff ff       	jmp    1020 <_init+0x20>
    11ce:	66 90                	xchg   %ax,%ax
    11d0:	f3 0f 1e fa          	endbr64
    11d4:	68 1a 00 00 00       	push   $0x1a
    11d9:	e9 42 fe ff ff       	jmp    1020 <_init+0x20>
    11de:	66 90                	xchg   %ax,%ax
    11e0:	f3 0f 1e fa          	endbr64
    11e4:	68 1b 00 00 00       	push   $0x1b
    11e9:	e9 32 fe ff ff       	jmp    1020 <_init+0x20>
    11ee:	66 90                	xchg   %ax,%ax
    11f0:	f3 0f 1e fa          	endbr64
    11f4:	68 1c 00 00 00       	push   $0x1c
    11f9:	e9 22 fe ff ff       	jmp    1020 <_init+0x20>
    11fe:	66 90                	xchg   %ax,%ax
    1200:	f3 0f 1e fa          	endbr64
    1204:	68 1d 00 00 00       	push   $0x1d
    1209:	e9 12 fe ff ff       	jmp    1020 <_init+0x20>
    120e:	66 90                	xchg   %ax,%ax
    1210:	f3 0f 1e fa          	endbr64
    1214:	68 1e 00 00 00       	push   $0x1e
    1219:	e9 02 fe ff ff       	jmp    1020 <_init+0x20>
    121e:	66 90                	xchg   %ax,%ax
    1220:	f3 0f 1e fa          	endbr64
    1224:	68 1f 00 00 00       	push   $0x1f
    1229:	e9 f2 fd ff ff       	jmp    1020 <_init+0x20>
    122e:	66 90                	xchg   %ax,%ax
    1230:	f3 0f 1e fa          	endbr64
    1234:	68 20 00 00 00       	push   $0x20
    1239:	e9 e2 fd ff ff       	jmp    1020 <_init+0x20>
    123e:	66 90                	xchg   %ax,%ax

Desmontagem da seção .plt.got:

0000000000001240 <__cxa_finalize@plt>:
    1240:	f3 0f 1e fa          	endbr64
    1244:	ff 25 8e 3d 00 00    	jmp    *0x3d8e(%rip)        # 4fd8 <__cxa_finalize@GLIBC_2.2.5>
    124a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

Desmontagem da seção .plt.sec:

0000000000001250 <__printf_chk@plt>:
    1250:	f3 0f 1e fa          	endbr64
    1254:	ff 25 76 3c 00 00    	jmp    *0x3c76(%rip)        # 4ed0 <__printf_chk@GLIBC_2.3.4>
    125a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001260 <SDL_DestroyWindow@plt>:
    1260:	f3 0f 1e fa          	endbr64
    1264:	ff 25 6e 3c 00 00    	jmp    *0x3c6e(%rip)        # 4ed8 <SDL_DestroyWindow@Base>
    126a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001270 <SDL_CreateRenderer@plt>:
    1270:	f3 0f 1e fa          	endbr64
    1274:	ff 25 66 3c 00 00    	jmp    *0x3c66(%rip)        # 4ee0 <SDL_CreateRenderer@Base>
    127a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001280 <__errno_location@plt>:
    1280:	f3 0f 1e fa          	endbr64
    1284:	ff 25 5e 3c 00 00    	jmp    *0x3c5e(%rip)        # 4ee8 <__errno_location@GLIBC_2.2.5>
    128a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001290 <SDL_CreateWindow@plt>:
    1290:	f3 0f 1e fa          	endbr64
    1294:	ff 25 56 3c 00 00    	jmp    *0x3c56(%rip)        # 4ef0 <SDL_CreateWindow@Base>
    129a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012a0 <SDL_Quit@plt>:
    12a0:	f3 0f 1e fa          	endbr64
    12a4:	ff 25 4e 3c 00 00    	jmp    *0x3c4e(%rip)        # 4ef8 <SDL_Quit@Base>
    12aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012b0 <SDL_RenderPresent@plt>:
    12b0:	f3 0f 1e fa          	endbr64
    12b4:	ff 25 46 3c 00 00    	jmp    *0x3c46(%rip)        # 4f00 <SDL_RenderPresent@Base>
    12ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012c0 <strerror@plt>:
    12c0:	f3 0f 1e fa          	endbr64
    12c4:	ff 25 3e 3c 00 00    	jmp    *0x3c3e(%rip)        # 4f08 <strerror@GLIBC_2.2.5>
    12ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012d0 <write@plt>:
    12d0:	f3 0f 1e fa          	endbr64
    12d4:	ff 25 36 3c 00 00    	jmp    *0x3c36(%rip)        # 4f10 <write@GLIBC_2.2.5>
    12da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012e0 <SDL_DestroyRenderer@plt>:
    12e0:	f3 0f 1e fa          	endbr64
    12e4:	ff 25 2e 3c 00 00    	jmp    *0x3c2e(%rip)        # 4f18 <SDL_DestroyRenderer@Base>
    12ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012f0 <SDL_RenderFillRect@plt>:
    12f0:	f3 0f 1e fa          	endbr64
    12f4:	ff 25 26 3c 00 00    	jmp    *0x3c26(%rip)        # 4f20 <SDL_RenderFillRect@Base>
    12fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001300 <SDL_PollEvent@plt>:
    1300:	f3 0f 1e fa          	endbr64
    1304:	ff 25 1e 3c 00 00    	jmp    *0x3c1e(%rip)        # 4f28 <SDL_PollEvent@Base>
    130a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001310 <SDL_Delay@plt>:
    1310:	f3 0f 1e fa          	endbr64
    1314:	ff 25 16 3c 00 00    	jmp    *0x3c16(%rip)        # 4f30 <SDL_Delay@Base>
    131a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001320 <open@plt>:
    1320:	f3 0f 1e fa          	endbr64
    1324:	ff 25 0e 3c 00 00    	jmp    *0x3c0e(%rip)        # 4f38 <open@GLIBC_2.2.5>
    132a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001330 <SDL_GetError@plt>:
    1330:	f3 0f 1e fa          	endbr64
    1334:	ff 25 06 3c 00 00    	jmp    *0x3c06(%rip)        # 4f40 <SDL_GetError@Base>
    133a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001340 <sleep@plt>:
    1340:	f3 0f 1e fa          	endbr64
    1344:	ff 25 fe 3b 00 00    	jmp    *0x3bfe(%rip)        # 4f48 <sleep@GLIBC_2.2.5>
    134a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001350 <pthread_mutex_unlock@plt>:
    1350:	f3 0f 1e fa          	endbr64
    1354:	ff 25 f6 3b 00 00    	jmp    *0x3bf6(%rip)        # 4f50 <pthread_mutex_unlock@GLIBC_2.2.5>
    135a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001360 <pthread_join@plt>:
    1360:	f3 0f 1e fa          	endbr64
    1364:	ff 25 ee 3b 00 00    	jmp    *0x3bee(%rip)        # 4f58 <pthread_join@GLIBC_2.34>
    136a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001370 <SDL_Init@plt>:
    1370:	f3 0f 1e fa          	endbr64
    1374:	ff 25 e6 3b 00 00    	jmp    *0x3be6(%rip)        # 4f60 <SDL_Init@Base>
    137a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001380 <SDL_RenderClear@plt>:
    1380:	f3 0f 1e fa          	endbr64
    1384:	ff 25 de 3b 00 00    	jmp    *0x3bde(%rip)        # 4f68 <SDL_RenderClear@Base>
    138a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001390 <SDL_HasIntersection@plt>:
    1390:	f3 0f 1e fa          	endbr64
    1394:	ff 25 d6 3b 00 00    	jmp    *0x3bd6(%rip)        # 4f70 <SDL_HasIntersection@Base>
    139a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013a0 <__stack_chk_fail@plt>:
    13a0:	f3 0f 1e fa          	endbr64
    13a4:	ff 25 ce 3b 00 00    	jmp    *0x3bce(%rip)        # 4f78 <__stack_chk_fail@GLIBC_2.4>
    13aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013b0 <pthread_mutex_destroy@plt>:
    13b0:	f3 0f 1e fa          	endbr64
    13b4:	ff 25 c6 3b 00 00    	jmp    *0x3bc6(%rip)        # 4f80 <pthread_mutex_destroy@GLIBC_2.2.5>
    13ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013c0 <ioctl@plt>:
    13c0:	f3 0f 1e fa          	endbr64
    13c4:	ff 25 be 3b 00 00    	jmp    *0x3bbe(%rip)        # 4f88 <ioctl@GLIBC_2.2.5>
    13ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013d0 <usleep@plt>:
    13d0:	f3 0f 1e fa          	endbr64
    13d4:	ff 25 b6 3b 00 00    	jmp    *0x3bb6(%rip)        # 4f90 <usleep@GLIBC_2.2.5>
    13da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013e0 <SDL_SetRenderDrawColor@plt>:
    13e0:	f3 0f 1e fa          	endbr64
    13e4:	ff 25 ae 3b 00 00    	jmp    *0x3bae(%rip)        # 4f98 <SDL_SetRenderDrawColor@Base>
    13ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013f0 <read@plt>:
    13f0:	f3 0f 1e fa          	endbr64
    13f4:	ff 25 a6 3b 00 00    	jmp    *0x3ba6(%rip)        # 4fa0 <read@GLIBC_2.2.5>
    13fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001400 <pthread_mutex_lock@plt>:
    1400:	f3 0f 1e fa          	endbr64
    1404:	ff 25 9e 3b 00 00    	jmp    *0x3b9e(%rip)        # 4fa8 <pthread_mutex_lock@GLIBC_2.2.5>
    140a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001410 <pthread_mutex_init@plt>:
    1410:	f3 0f 1e fa          	endbr64
    1414:	ff 25 96 3b 00 00    	jmp    *0x3b96(%rip)        # 4fb0 <pthread_mutex_init@GLIBC_2.2.5>
    141a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001420 <puts@plt>:
    1420:	f3 0f 1e fa          	endbr64
    1424:	ff 25 8e 3b 00 00    	jmp    *0x3b8e(%rip)        # 4fb8 <puts@GLIBC_2.2.5>
    142a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001430 <pthread_create@plt>:
    1430:	f3 0f 1e fa          	endbr64
    1434:	ff 25 86 3b 00 00    	jmp    *0x3b86(%rip)        # 4fc0 <pthread_create@GLIBC_2.34>
    143a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001440 <close@plt>:
    1440:	f3 0f 1e fa          	endbr64
    1444:	ff 25 7e 3b 00 00    	jmp    *0x3b7e(%rip)        # 4fc8 <close@GLIBC_2.2.5>
    144a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001450 <SDL_GetKeyboardState@plt>:
    1450:	f3 0f 1e fa          	endbr64
    1454:	ff 25 76 3b 00 00    	jmp    *0x3b76(%rip)        # 4fd0 <SDL_GetKeyboardState@Base>
    145a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

Desmontagem da seção .text:

0000000000001460 <main>:
    pthread_mutex_unlock(&game->mutex);
    
    SDL_RenderPresent(renderer);
}

int main(int argc, char** argv) {
    1460:	f3 0f 1e fa          	endbr64
    1464:	41 55                	push   %r13
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    1466:	48 8d 3d ac 20 00 00 	lea    0x20ac(%rip),%rdi        # 3519 <_IO_stdin_used+0x519>
    pthread_mutex_init(&game->mutex, NULL);
    146d:	4c 8d 2d 0c 3c 00 00 	lea    0x3c0c(%rip),%r13        # 5080 <game_data+0x40>
int main(int argc, char** argv) {
    1474:	41 54                	push   %r12
    1476:	55                   	push   %rbp
    game->state = GAME_MENU;
    1477:	49 8d 6d c0          	lea    -0x40(%r13),%rbp
int main(int argc, char** argv) {
    147b:	53                   	push   %rbx
    147c:	48 83 ec 68          	sub    $0x68,%rsp
    1480:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1487:	00 00 
    1489:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    148e:	31 c0                	xor    %eax,%eax
    SDL_Window* window = NULL;
    1490:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
    1497:	00 00 
    SDL_Renderer* renderer = NULL;
    1499:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    14a0:	00 00 
    14a2:	e8 79 ff ff ff       	call   1420 <puts@plt>
    pthread_mutex_init(&game->mutex, NULL);
    14a7:	31 f6                	xor    %esi,%esi
    14a9:	4c 89 ef             	mov    %r13,%rdi
    14ac:	e8 5f ff ff ff       	call   1410 <pthread_mutex_init@plt>
    game->player1.x = 50;
    14b1:	48 8b 05 e0 20 00 00 	mov    0x20e0(%rip),%rax        # 3598 <_IO_stdin_used+0x598>
    game->ball.x = WINDOW_WIDTH / 2;
    14b8:	0f 28 05 b1 20 00 00 	movaps 0x20b1(%rip),%xmm0        # 3570 <_IO_stdin_used+0x570>
    
    // Initialize game
    init_game(&game_data);
    
    // Initialize hardware
    if (init_hardware(&game_data) < 0) {
    14bf:	48 89 ef             	mov    %rbp,%rdi
    game->state = GAME_MENU;
    14c2:	c7 05 74 3b 00 00 00 	movl   $0x0,0x3b74(%rip)        # 5040 <game_data>
    14c9:	00 00 00 
    game->player1.x = 50;
    14cc:	48 89 05 81 3b 00 00 	mov    %rax,0x3b81(%rip)        # 5054 <game_data+0x14>
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    14d3:	48 8b 05 c6 20 00 00 	mov    0x20c6(%rip),%rax        # 35a0 <_IO_stdin_used+0x5a0>
    game->running = 1;
    14da:	c7 05 c4 3b 00 00 01 	movl   $0x1,0x3bc4(%rip)        # 50a8 <game_data+0x68>
    14e1:	00 00 00 
    game->player1.score = 0;
    14e4:	c7 05 6e 3b 00 00 00 	movl   $0x0,0x3b6e(%rip)        # 505c <game_data+0x1c>
    14eb:	00 00 00 
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    14ee:	48 89 05 6b 3b 00 00 	mov    %rax,0x3b6b(%rip)        # 5060 <game_data+0x20>
    game->player2.score = 0;
    14f5:	c7 05 69 3b 00 00 00 	movl   $0x0,0x3b69(%rip)        # 5068 <game_data+0x28>
    14fc:	00 00 00 
    game->ball.x = WINDOW_WIDTH / 2;
    14ff:	0f 11 05 3e 3b 00 00 	movups %xmm0,0x3b3e(%rip)        # 5044 <game_data+0x4>
    if (init_hardware(&game_data) < 0) {
    1506:	e8 35 02 00 00       	call   1740 <_Z13init_hardwareP8GameData>
    150b:	85 c0                	test   %eax,%eax
    150d:	0f 88 1c 01 00 00    	js     162f <main+0x1cf>
        printf("Warning: Hardware initialization failed, continuing without FPGA features\n");
    }
    
    // Initialize graphics
    if (init_graphics(&window, &renderer) < 0) {
    1513:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    1518:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    151d:	e8 7e 0b 00 00       	call   20a0 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer>
    1522:	85 c0                	test   %eax,%eax
    1524:	0f 88 16 01 00 00    	js     1640 <main+0x1e0>
        return -1;
    }
    
    // Start hardware thread
    pthread_create(&hardware_thread_id, NULL, hardware_thread, &game_data);
    152a:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
    152f:	48 89 e9             	mov    %rbp,%rcx
    1532:	48 8d 5c 24 20       	lea    0x20(%rsp),%rbx
    1537:	31 f6                	xor    %esi,%esi
    1539:	48 8d 15 40 09 00 00 	lea    0x940(%rip),%rdx        # 1e80 <_Z15hardware_threadPv>
    1540:	e8 eb fe ff ff       	call   1430 <pthread_create@plt>
    1545:	48 8d 3d 9c 1e 00 00 	lea    0x1e9c(%rip),%rdi        # 33e8 <_IO_stdin_used+0x3e8>
    154c:	e8 cf fe ff ff       	call   1420 <puts@plt>
    
    printf("Game initialized. Press SPACE to start, W/S and UP/DOWN to control paddles\n");
    
    // Main game loop
    while (game_data.running) {
    1551:	8b 15 51 3b 00 00    	mov    0x3b51(%rip),%edx        # 50a8 <game_data+0x68>
    
    // Cleanup
    pthread_join(hardware_thread_id, NULL);
    cleanup_hardware(&game_data);
    
    SDL_DestroyRenderer(renderer);
    1557:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
    while (game_data.running) {
    155c:	85 d2                	test   %edx,%edx
    155e:	75 16                	jne    1576 <main+0x116>
    1560:	eb 59                	jmp    15bb <main+0x15b>
    1562:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            if (event.type == SDL_QUIT) {
    1568:	81 7c 24 20 00 01 00 	cmpl   $0x100,0x20(%rsp)
    156f:	00 
    1570:	0f 84 aa 00 00 00    	je     1620 <main+0x1c0>
        while (SDL_PollEvent(&event)) {
    1576:	48 89 df             	mov    %rbx,%rdi
    1579:	e8 82 fd ff ff       	call   1300 <SDL_PollEvent@plt>
    157e:	85 c0                	test   %eax,%eax
    1580:	75 e6                	jne    1568 <main+0x108>
        const Uint8* keystate = SDL_GetKeyboardState(NULL);
    1582:	31 ff                	xor    %edi,%edi
    1584:	e8 c7 fe ff ff       	call   1450 <SDL_GetKeyboardState@plt>
        handle_input(&game_data, keystate);
    1589:	48 89 ef             	mov    %rbp,%rdi
        const Uint8* keystate = SDL_GetKeyboardState(NULL);
    158c:	48 89 c6             	mov    %rax,%rsi
        handle_input(&game_data, keystate);
    158f:	e8 fc 0d 00 00       	call   2390 <_Z12handle_inputP8GameDataPKh>
        update_game(&game_data);
    1594:	48 89 ef             	mov    %rbp,%rdi
    1597:	e8 34 0c 00 00       	call   21d0 <_Z11update_gameP8GameData>
        render_game(renderer, &game_data);
    159c:	48 89 ee             	mov    %rbp,%rsi
    159f:	4c 89 e7             	mov    %r12,%rdi
    15a2:	e8 59 0f 00 00       	call   2500 <_Z11render_gameP12SDL_RendererP8GameData>
        SDL_Delay(16); // ~60 FPS
    15a7:	bf 10 00 00 00       	mov    $0x10,%edi
    15ac:	e8 5f fd ff ff       	call   1310 <SDL_Delay@plt>
    while (game_data.running) {
    15b1:	8b 05 f1 3a 00 00    	mov    0x3af1(%rip),%eax        # 50a8 <game_data+0x68>
    15b7:	85 c0                	test   %eax,%eax
    15b9:	75 bb                	jne    1576 <main+0x116>
    pthread_join(hardware_thread_id, NULL);
    15bb:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    15c0:	31 f6                	xor    %esi,%esi
    15c2:	e8 99 fd ff ff       	call   1360 <pthread_join@plt>
    cleanup_hardware(&game_data);
    15c7:	48 89 ef             	mov    %rbp,%rdi
    15ca:	e8 21 04 00 00       	call   19f0 <_Z16cleanup_hardwareP8GameData>
    SDL_DestroyRenderer(renderer);
    15cf:	4c 89 e7             	mov    %r12,%rdi
    15d2:	e8 09 fd ff ff       	call   12e0 <SDL_DestroyRenderer@plt>
    SDL_DestroyWindow(window);
    15d7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    15dc:	e8 7f fc ff ff       	call   1260 <SDL_DestroyWindow@plt>
    SDL_Quit();
    15e1:	e8 ba fc ff ff       	call   12a0 <SDL_Quit@plt>
    
    pthread_mutex_destroy(&game_data.mutex);
    15e6:	4c 89 ef             	mov    %r13,%rdi
    15e9:	e8 c2 fd ff ff       	call   13b0 <pthread_mutex_destroy@plt>
    15ee:	48 8d 3d 3f 1f 00 00 	lea    0x1f3f(%rip),%rdi        # 3534 <_IO_stdin_used+0x534>
    15f5:	e8 26 fe ff ff       	call   1420 <puts@plt>
    
    printf("Game finished.\n");
    return 0;
    15fa:	31 c0                	xor    %eax,%eax
}
    15fc:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
    1601:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1608:	00 00 
    160a:	75 39                	jne    1645 <main+0x1e5>
    160c:	48 83 c4 68          	add    $0x68,%rsp
    1610:	5b                   	pop    %rbx
    1611:	5d                   	pop    %rbp
    1612:	41 5c                	pop    %r12
    1614:	41 5d                	pop    %r13
    1616:	c3                   	ret
    1617:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    161e:	00 00 
                game_data.running = 0;
    1620:	c7 05 7e 3a 00 00 00 	movl   $0x0,0x3a7e(%rip)        # 50a8 <game_data+0x68>
    1627:	00 00 00 
    162a:	e9 47 ff ff ff       	jmp    1576 <main+0x116>
    162f:	48 8d 3d 62 1d 00 00 	lea    0x1d62(%rip),%rdi        # 3398 <_IO_stdin_used+0x398>
    1636:	e8 e5 fd ff ff       	call   1420 <puts@plt>
    163b:	e9 d3 fe ff ff       	jmp    1513 <main+0xb3>
        return -1;
    1640:	83 c8 ff             	or     $0xffffffff,%eax
    1643:	eb b7                	jmp    15fc <main+0x19c>
}
    1645:	e8 56 fd ff ff       	call   13a0 <__stack_chk_fail@plt>
    164a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001650 <_start>:
    1650:	f3 0f 1e fa          	endbr64
    1654:	31 ed                	xor    %ebp,%ebp
    1656:	49 89 d1             	mov    %rdx,%r9
    1659:	5e                   	pop    %rsi
    165a:	48 89 e2             	mov    %rsp,%rdx
    165d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1661:	50                   	push   %rax
    1662:	54                   	push   %rsp
    1663:	45 31 c0             	xor    %r8d,%r8d
    1666:	31 c9                	xor    %ecx,%ecx
    1668:	48 8d 3d f1 fd ff ff 	lea    -0x20f(%rip),%rdi        # 1460 <main>
    166f:	ff 15 6b 39 00 00    	call   *0x396b(%rip)        # 4fe0 <__libc_start_main@GLIBC_2.34>
    1675:	f4                   	hlt
    1676:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    167d:	00 00 00 

0000000000001680 <deregister_tm_clones>:
    1680:	48 8d 3d 89 39 00 00 	lea    0x3989(%rip),%rdi        # 5010 <__TMC_END__>
    1687:	48 8d 05 82 39 00 00 	lea    0x3982(%rip),%rax        # 5010 <__TMC_END__>
    168e:	48 39 f8             	cmp    %rdi,%rax
    1691:	74 15                	je     16a8 <deregister_tm_clones+0x28>
    1693:	48 8b 05 4e 39 00 00 	mov    0x394e(%rip),%rax        # 4fe8 <_ITM_deregisterTMCloneTable@Base>
    169a:	48 85 c0             	test   %rax,%rax
    169d:	74 09                	je     16a8 <deregister_tm_clones+0x28>
    169f:	ff e0                	jmp    *%rax
    16a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    16a8:	c3                   	ret
    16a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000016b0 <register_tm_clones>:
    16b0:	48 8d 3d 59 39 00 00 	lea    0x3959(%rip),%rdi        # 5010 <__TMC_END__>
    16b7:	48 8d 35 52 39 00 00 	lea    0x3952(%rip),%rsi        # 5010 <__TMC_END__>
    16be:	48 29 fe             	sub    %rdi,%rsi
    16c1:	48 89 f0             	mov    %rsi,%rax
    16c4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    16c8:	48 c1 f8 03          	sar    $0x3,%rax
    16cc:	48 01 c6             	add    %rax,%rsi
    16cf:	48 d1 fe             	sar    $1,%rsi
    16d2:	74 14                	je     16e8 <register_tm_clones+0x38>
    16d4:	48 8b 05 1d 39 00 00 	mov    0x391d(%rip),%rax        # 4ff8 <_ITM_registerTMCloneTable@Base>
    16db:	48 85 c0             	test   %rax,%rax
    16de:	74 08                	je     16e8 <register_tm_clones+0x38>
    16e0:	ff e0                	jmp    *%rax
    16e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    16e8:	c3                   	ret
    16e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000016f0 <__do_global_dtors_aux>:
    16f0:	f3 0f 1e fa          	endbr64
    16f4:	80 3d 25 39 00 00 00 	cmpb   $0x0,0x3925(%rip)        # 5020 <completed.0>
    16fb:	75 2b                	jne    1728 <__do_global_dtors_aux+0x38>
    16fd:	55                   	push   %rbp
    16fe:	48 83 3d d2 38 00 00 	cmpq   $0x0,0x38d2(%rip)        # 4fd8 <__cxa_finalize@GLIBC_2.2.5>
    1705:	00 
    1706:	48 89 e5             	mov    %rsp,%rbp
    1709:	74 0c                	je     1717 <__do_global_dtors_aux+0x27>
    170b:	48 8b 3d f6 38 00 00 	mov    0x38f6(%rip),%rdi        # 5008 <__dso_handle>
    1712:	e8 29 fb ff ff       	call   1240 <__cxa_finalize@plt>
    1717:	e8 64 ff ff ff       	call   1680 <deregister_tm_clones>
    171c:	c6 05 fd 38 00 00 01 	movb   $0x1,0x38fd(%rip)        # 5020 <completed.0>
    1723:	5d                   	pop    %rbp
    1724:	c3                   	ret
    1725:	0f 1f 00             	nopl   (%rax)
    1728:	c3                   	ret
    1729:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001730 <frame_dummy>:
    1730:	f3 0f 1e fa          	endbr64
    1734:	e9 77 ff ff ff       	jmp    16b0 <register_tm_clones>
    1739:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001740 <_Z13init_hardwareP8GameData>:
#include "ioctl_cmds.h"
#include "display.h"
#include "pong.h"

// Initialize hardware connection
int init_hardware(GameData* game) {
    1740:	f3 0f 1e fa          	endbr64
    1744:	53                   	push   %rbx
    1745:	48 89 fb             	mov    %rdi,%rbx
    1748:	48 8d 3d d1 18 00 00 	lea    0x18d1(%rip),%rdi        # 3020 <_IO_stdin_used+0x20>
    174f:	48 83 ec 10          	sub    $0x10,%rsp
    1753:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    175a:	00 00 
    175c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1761:	31 c0                	xor    %eax,%eax
    1763:	e8 b8 fc ff ff       	call   1420 <puts@plt>
      if (__OPEN_NEEDS_MODE (__oflag) && __va_arg_pack_len () < 1)
	{
	  __open_missing_mode ();
	  return __open_2 (__path, __oflag);
	}
      return __open_alias (__path, __oflag, __va_arg_pack ());
    1768:	be 02 00 00 00       	mov    $0x2,%esi
    176d:	48 8d 3d bf 1c 00 00 	lea    0x1cbf(%rip),%rdi        # 3433 <_IO_stdin_used+0x433>
    1774:	31 c0                	xor    %eax,%eax
    1776:	e8 a5 fb ff ff       	call   1320 <open@plt>
    printf("Initializing FPGA hardware....\n");
    
    // Try to open the PCI device file
    game->fpga_fd = open("/dev/de2i-150", O_RDWR);
    177b:	89 43 38             	mov    %eax,0x38(%rbx)
    if (game->fpga_fd < 0) {
    177e:	85 c0                	test   %eax,%eax
    1780:	0f 88 21 02 00 00    	js     19a7 <_Z13init_hardwareP8GameData+0x267>
    1786:	89 c2                	mov    %eax,%edx
    1788:	48 8d 35 09 19 00 00 	lea    0x1909(%rip),%rsi        # 3098 <_IO_stdin_used+0x98>
    178f:	bf 02 00 00 00       	mov    $0x2,%edi
    1794:	31 c0                	xor    %eax,%eax
    1796:	e8 b5 fa ff ff       	call   1250 <__printf_chk@plt>
    179b:	48 8d 3d 26 19 00 00 	lea    0x1926(%rip),%rdi        # 30c8 <_IO_stdin_used+0xc8>
    17a2:	e8 79 fc ff ff       	call   1420 <puts@plt>
    17a7:	48 8d 3d 4a 19 00 00 	lea    0x194a(%rip),%rdi        # 30f8 <_IO_stdin_used+0xf8>
    17ae:	e8 6d fc ff ff       	call   1420 <puts@plt>
    // Test initial communication with VISIBLE patterns
    printf("=== TESTING HARDWARE WITH VISIBLE PATTERNS ===\n");

    // Test red LEDs with a visible pattern
    printf("Testing WR_RED_LEDS with visible pattern...\n");
    if (ioctl(game->fpga_fd, WR_RED_LEDS) < 0) {
    17b3:	8b 7b 38             	mov    0x38(%rbx),%edi
    17b6:	31 c0                	xor    %eax,%eax
    17b8:	be 65 61 00 00       	mov    $0x6165,%esi
    17bd:	e8 fe fb ff ff       	call   13c0 <ioctl@plt>
    17c2:	85 c0                	test   %eax,%eax
    17c4:	0f 88 b6 01 00 00    	js     1980 <_Z13init_hardwareP8GameData+0x240>
    17ca:	48 8d 3d 70 1c 00 00 	lea    0x1c70(%rip),%rdi        # 3441 <_IO_stdin_used+0x441>
    17d1:	e8 4a fc ff ff       	call   1420 <puts@plt>
        printf("❌ IOCTL WR_RED_LEDS failed: %s\n", strerror(errno));
    } else {
        printf("✓ IOCTL WR_RED_LEDS success\n");
        uint32_t red_pattern = 0xAAAAAAAA; // Alternating pattern
        ssize_t written = write(game->fpga_fd, &red_pattern, sizeof(red_pattern));
    17d6:	8b 7b 38             	mov    0x38(%rbx),%edi
    17d9:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    17de:	ba 04 00 00 00       	mov    $0x4,%edx
        uint32_t red_pattern = 0xAAAAAAAA; // Alternating pattern
    17e3:	c7 44 24 04 aa aa aa 	movl   $0xaaaaaaaa,0x4(%rsp)
    17ea:	aa 
        ssize_t written = write(game->fpga_fd, &red_pattern, sizeof(red_pattern));
    17eb:	e8 e0 fa ff ff       	call   12d0 <write@plt>
    17f0:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
    17f4:	bf 02 00 00 00       	mov    $0x2,%edi
    17f9:	48 8d 35 50 19 00 00 	lea    0x1950(%rip),%rsi        # 3150 <_IO_stdin_used+0x150>
    1800:	48 89 c2             	mov    %rax,%rdx
    1803:	31 c0                	xor    %eax,%eax
    1805:	e8 46 fa ff ff       	call   1250 <__printf_chk@plt>
    180a:	48 8d 3d 6f 19 00 00 	lea    0x196f(%rip),%rdi        # 3180 <_IO_stdin_used+0x180>
    1811:	e8 0a fc ff ff       	call   1420 <puts@plt>
        printf("✓ Red LEDs written: %ld bytes, pattern=0x%X\n", written, red_pattern);
        printf(">> CHECK: Red LEDs should show alternating pattern!\n");
    }

    // Wait to see the effect
    sleep(2);
    1816:	bf 02 00 00 00       	mov    $0x2,%edi
    181b:	e8 20 fb ff ff       	call   1340 <sleep@plt>
    1820:	48 8d 3d 91 19 00 00 	lea    0x1991(%rip),%rdi        # 31b8 <_IO_stdin_used+0x1b8>
    1827:	e8 f4 fb ff ff       	call   1420 <puts@plt>

    // Test green LEDs
    printf("Testing WR_GREEN_LEDS with visible pattern...\n");
    if (ioctl(game->fpga_fd, WR_GREEN_LEDS) < 0) {
    182c:	8b 7b 38             	mov    0x38(%rbx),%edi
    182f:	31 c0                	xor    %eax,%eax
    1831:	be 66 61 00 00       	mov    $0x6166,%esi
    1836:	e8 85 fb ff ff       	call   13c0 <ioctl@plt>
    183b:	85 c0                	test   %eax,%eax
    183d:	0f 88 0d 01 00 00    	js     1950 <_Z13init_hardwareP8GameData+0x210>
    1843:	48 8d 3d c6 19 00 00 	lea    0x19c6(%rip),%rdi        # 3210 <_IO_stdin_used+0x210>
    184a:	e8 d1 fb ff ff       	call   1420 <puts@plt>
        printf("❌ IOCTL WR_GREEN_LEDS failed: %s\n", strerror(errno));
    } else {
        printf("✓ IOCTL WR_GREEN_LEDS success\n");
        uint32_t green_pattern = 0x55555555; // Different alternating pattern
        ssize_t written = write(game->fpga_fd, &green_pattern, sizeof(green_pattern));
    184f:	8b 7b 38             	mov    0x38(%rbx),%edi
    1852:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    1857:	ba 04 00 00 00       	mov    $0x4,%edx
        uint32_t green_pattern = 0x55555555; // Different alternating pattern
    185c:	c7 44 24 04 55 55 55 	movl   $0x55555555,0x4(%rsp)
    1863:	55 
        ssize_t written = write(game->fpga_fd, &green_pattern, sizeof(green_pattern));
    1864:	e8 67 fa ff ff       	call   12d0 <write@plt>
    1869:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
    186d:	bf 02 00 00 00       	mov    $0x2,%edi
    1872:	48 8d 35 b7 19 00 00 	lea    0x19b7(%rip),%rsi        # 3230 <_IO_stdin_used+0x230>
    1879:	48 89 c2             	mov    %rax,%rdx
    187c:	31 c0                	xor    %eax,%eax
    187e:	e8 cd f9 ff ff       	call   1250 <__printf_chk@plt>
    1883:	48 8d 3d de 19 00 00 	lea    0x19de(%rip),%rdi        # 3268 <_IO_stdin_used+0x268>
    188a:	e8 91 fb ff ff       	call   1420 <puts@plt>
        printf("✓ Green LEDs written: %ld bytes, pattern=0x%X\n", written, green_pattern);
        printf(">> CHECK: Green LEDs should show different pattern!\n");
    }

    sleep(2);
    188f:	bf 02 00 00 00       	mov    $0x2,%edi
    1894:	e8 a7 fa ff ff       	call   1340 <sleep@plt>
    1899:	48 8d 3d 00 1a 00 00 	lea    0x1a00(%rip),%rdi        # 32a0 <_IO_stdin_used+0x2a0>
    18a0:	e8 7b fb ff ff       	call   1420 <puts@plt>

    // Test 7-segment displays with number
    printf("Testing displays with number 8...\n");
    uint32_t display_8 = 0xFFFFFF80; // Number 8
    if (ioctl(game->fpga_fd, WR_L_DISPLAY) >= 0) {
    18a5:	8b 7b 38             	mov    0x38(%rbx),%edi
    18a8:	31 c0                	xor    %eax,%eax
    18aa:	be 63 61 00 00       	mov    $0x6163,%esi
    uint32_t display_8 = 0xFFFFFF80; // Number 8
    18af:	c7 44 24 04 80 ff ff 	movl   $0xffffff80,0x4(%rsp)
    18b6:	ff 
    if (ioctl(game->fpga_fd, WR_L_DISPLAY) >= 0) {
    18b7:	e8 04 fb ff ff       	call   13c0 <ioctl@plt>
    18bc:	85 c0                	test   %eax,%eax
    18be:	78 1e                	js     18de <_Z13init_hardwareP8GameData+0x19e>
        write(game->fpga_fd, &display_8, sizeof(display_8));
    18c0:	8b 7b 38             	mov    0x38(%rbx),%edi
    18c3:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    18c8:	ba 04 00 00 00       	mov    $0x4,%edx
    18cd:	e8 fe f9 ff ff       	call   12d0 <write@plt>
    18d2:	48 8d 3d ef 19 00 00 	lea    0x19ef(%rip),%rdi        # 32c8 <_IO_stdin_used+0x2c8>
    18d9:	e8 42 fb ff ff       	call   1420 <puts@plt>
        printf("✓ Left display should show '8'\n");
    }
    if (ioctl(game->fpga_fd, WR_R_DISPLAY) >= 0) {
    18de:	8b 7b 38             	mov    0x38(%rbx),%edi
    18e1:	31 c0                	xor    %eax,%eax
    18e3:	be 64 61 00 00       	mov    $0x6164,%esi
    18e8:	e8 d3 fa ff ff       	call   13c0 <ioctl@plt>
    18ed:	85 c0                	test   %eax,%eax
    18ef:	78 1e                	js     190f <_Z13init_hardwareP8GameData+0x1cf>
        write(game->fpga_fd, &display_8, sizeof(display_8));
    18f1:	8b 7b 38             	mov    0x38(%rbx),%edi
    18f4:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    18f9:	ba 04 00 00 00       	mov    $0x4,%edx
    18fe:	e8 cd f9 ff ff       	call   12d0 <write@plt>
    1903:	48 8d 3d e6 19 00 00 	lea    0x19e6(%rip),%rdi        # 32f0 <_IO_stdin_used+0x2f0>
    190a:	e8 11 fb ff ff       	call   1420 <puts@plt>
    190f:	48 8d 3d 02 1a 00 00 	lea    0x1a02(%rip),%rdi        # 3318 <_IO_stdin_used+0x318>
    1916:	e8 05 fb ff ff       	call   1420 <puts@plt>
    191b:	48 8d 3d 16 1a 00 00 	lea    0x1a16(%rip),%rdi        # 3338 <_IO_stdin_used+0x338>
    1922:	e8 f9 fa ff ff       	call   1420 <puts@plt>
    1927:	48 8d 3d 42 1a 00 00 	lea    0x1a42(%rip),%rdi        # 3370 <_IO_stdin_used+0x370>
    192e:	e8 ed fa ff ff       	call   1420 <puts@plt>
    }

    printf("=== HARDWARE TEST COMPLETE ===\n");
    printf("If you see the patterns/numbers, hardware is working!\n");
    printf("Hardware initialization complete\n");
    return 0;
    1933:	31 c0                	xor    %eax,%eax
}
    1935:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    193a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1941:	00 00 
    1943:	0f 85 96 00 00 00    	jne    19df <_Z13init_hardwareP8GameData+0x29f>
    1949:	48 83 c4 10          	add    $0x10,%rsp
    194d:	5b                   	pop    %rbx
    194e:	c3                   	ret
    194f:	90                   	nop
        printf("❌ IOCTL WR_GREEN_LEDS failed: %s\n", strerror(errno));
    1950:	e8 2b f9 ff ff       	call   1280 <__errno_location@plt>
    1955:	8b 38                	mov    (%rax),%edi
    1957:	e8 64 f9 ff ff       	call   12c0 <strerror@plt>
    195c:	48 8d 35 85 18 00 00 	lea    0x1885(%rip),%rsi        # 31e8 <_IO_stdin_used+0x1e8>
    1963:	bf 02 00 00 00       	mov    $0x2,%edi
    1968:	48 89 c2             	mov    %rax,%rdx
    196b:	31 c0                	xor    %eax,%eax
    196d:	e8 de f8 ff ff       	call   1250 <__printf_chk@plt>
    1972:	e9 18 ff ff ff       	jmp    188f <_Z13init_hardwareP8GameData+0x14f>
    1977:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    197e:	00 00 
        printf("❌ IOCTL WR_RED_LEDS failed: %s\n", strerror(errno));
    1980:	e8 fb f8 ff ff       	call   1280 <__errno_location@plt>
    1985:	8b 38                	mov    (%rax),%edi
    1987:	e8 34 f9 ff ff       	call   12c0 <strerror@plt>
    198c:	48 8d 35 95 17 00 00 	lea    0x1795(%rip),%rsi        # 3128 <_IO_stdin_used+0x128>
    1993:	bf 02 00 00 00       	mov    $0x2,%edi
    1998:	48 89 c2             	mov    %rax,%rdx
    199b:	31 c0                	xor    %eax,%eax
    199d:	e8 ae f8 ff ff       	call   1250 <__printf_chk@plt>
    19a2:	e9 6f fe ff ff       	jmp    1816 <_Z13init_hardwareP8GameData+0xd6>
        printf("Failed to open FPGA device: %s\n", strerror(errno));
    19a7:	e8 d4 f8 ff ff       	call   1280 <__errno_location@plt>
    19ac:	8b 38                	mov    (%rax),%edi
    19ae:	e8 0d f9 ff ff       	call   12c0 <strerror@plt>
    19b3:	48 8d 35 86 16 00 00 	lea    0x1686(%rip),%rsi        # 3040 <_IO_stdin_used+0x40>
    19ba:	bf 02 00 00 00       	mov    $0x2,%edi
    19bf:	48 89 c2             	mov    %rax,%rdx
    19c2:	31 c0                	xor    %eax,%eax
    19c4:	e8 87 f8 ff ff       	call   1250 <__printf_chk@plt>
    19c9:	48 8d 3d 90 16 00 00 	lea    0x1690(%rip),%rdi        # 3060 <_IO_stdin_used+0x60>
    19d0:	e8 4b fa ff ff       	call   1420 <puts@plt>
        return -1;
    19d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    19da:	e9 56 ff ff ff       	jmp    1935 <_Z13init_hardwareP8GameData+0x1f5>
}
    19df:	e8 bc f9 ff ff       	call   13a0 <__stack_chk_fail@plt>
    19e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    19eb:	00 00 00 00 
    19ef:	90                   	nop

00000000000019f0 <_Z16cleanup_hardwareP8GameData>:

// Cleanup hardware resources
void cleanup_hardware(GameData* game) {
    19f0:	f3 0f 1e fa          	endbr64
    19f4:	55                   	push   %rbp
    19f5:	53                   	push   %rbx
    19f6:	48 83 ec 18          	sub    $0x18,%rsp
    19fa:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1a01:	00 00 
    1a03:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1a08:	31 c0                	xor    %eax,%eax
    if (game->fpga_fd >= 0) {
    1a0a:	8b 47 38             	mov    0x38(%rdi),%eax
    1a0d:	85 c0                	test   %eax,%eax
    1a0f:	0f 88 b6 00 00 00    	js     1acb <_Z16cleanup_hardwareP8GameData+0xdb>
    1a15:	48 89 fb             	mov    %rdi,%rbx
    1a18:	48 8d 3d 40 1a 00 00 	lea    0x1a40(%rip),%rdi        # 345f <_IO_stdin_used+0x45f>
        // Turn off all LEDs and displays before closing
        uint32_t zero = 0;
        uint32_t display_off = 0xFFFFFFFF;
        
        ioctl(game->fpga_fd, WR_RED_LEDS);
        write(game->fpga_fd, &zero, sizeof(zero));
    1a1f:	48 89 e5             	mov    %rsp,%rbp
    1a22:	e8 f9 f9 ff ff       	call   1420 <puts@plt>
        ioctl(game->fpga_fd, WR_RED_LEDS);
    1a27:	8b 7b 38             	mov    0x38(%rbx),%edi
    1a2a:	be 65 61 00 00       	mov    $0x6165,%esi
    1a2f:	31 c0                	xor    %eax,%eax
        uint32_t zero = 0;
    1a31:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
        uint32_t display_off = 0xFFFFFFFF;
    1a38:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
    1a3f:	ff 
        ioctl(game->fpga_fd, WR_RED_LEDS);
    1a40:	e8 7b f9 ff ff       	call   13c0 <ioctl@plt>
        write(game->fpga_fd, &zero, sizeof(zero));
    1a45:	8b 7b 38             	mov    0x38(%rbx),%edi
    1a48:	ba 04 00 00 00       	mov    $0x4,%edx
    1a4d:	48 89 ee             	mov    %rbp,%rsi
    1a50:	e8 7b f8 ff ff       	call   12d0 <write@plt>
        
        ioctl(game->fpga_fd, WR_GREEN_LEDS);
    1a55:	8b 7b 38             	mov    0x38(%rbx),%edi
    1a58:	be 66 61 00 00       	mov    $0x6166,%esi
    1a5d:	31 c0                	xor    %eax,%eax
    1a5f:	e8 5c f9 ff ff       	call   13c0 <ioctl@plt>
        write(game->fpga_fd, &zero, sizeof(zero));
    1a64:	8b 7b 38             	mov    0x38(%rbx),%edi
    1a67:	ba 04 00 00 00       	mov    $0x4,%edx
    1a6c:	48 89 ee             	mov    %rbp,%rsi
        
        ioctl(game->fpga_fd, WR_L_DISPLAY);
        write(game->fpga_fd, &display_off, sizeof(display_off));
    1a6f:	48 8d 6c 24 04       	lea    0x4(%rsp),%rbp
        write(game->fpga_fd, &zero, sizeof(zero));
    1a74:	e8 57 f8 ff ff       	call   12d0 <write@plt>
        ioctl(game->fpga_fd, WR_L_DISPLAY);
    1a79:	8b 7b 38             	mov    0x38(%rbx),%edi
    1a7c:	be 63 61 00 00       	mov    $0x6163,%esi
    1a81:	31 c0                	xor    %eax,%eax
    1a83:	e8 38 f9 ff ff       	call   13c0 <ioctl@plt>
        write(game->fpga_fd, &display_off, sizeof(display_off));
    1a88:	8b 7b 38             	mov    0x38(%rbx),%edi
    1a8b:	ba 04 00 00 00       	mov    $0x4,%edx
    1a90:	48 89 ee             	mov    %rbp,%rsi
    1a93:	e8 38 f8 ff ff       	call   12d0 <write@plt>
        
        ioctl(game->fpga_fd, WR_R_DISPLAY);
    1a98:	8b 7b 38             	mov    0x38(%rbx),%edi
    1a9b:	be 64 61 00 00       	mov    $0x6164,%esi
    1aa0:	31 c0                	xor    %eax,%eax
    1aa2:	e8 19 f9 ff ff       	call   13c0 <ioctl@plt>
        write(game->fpga_fd, &display_off, sizeof(display_off));
    1aa7:	8b 7b 38             	mov    0x38(%rbx),%edi
    1aaa:	ba 04 00 00 00       	mov    $0x4,%edx
    1aaf:	48 89 ee             	mov    %rbp,%rsi
    1ab2:	e8 19 f8 ff ff       	call   12d0 <write@plt>
        
        close(game->fpga_fd);
    1ab7:	8b 7b 38             	mov    0x38(%rbx),%edi
    1aba:	e8 81 f9 ff ff       	call   1440 <close@plt>
    1abf:	48 8d 3d b6 19 00 00 	lea    0x19b6(%rip),%rdi        # 347c <_IO_stdin_used+0x47c>
    1ac6:	e8 55 f9 ff ff       	call   1420 <puts@plt>
        printf("FPGA device closed\n");
    }
}
    1acb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1ad0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1ad7:	00 00 
    1ad9:	75 07                	jne    1ae2 <_Z16cleanup_hardwareP8GameData+0xf2>
    1adb:	48 83 c4 18          	add    $0x18,%rsp
    1adf:	5b                   	pop    %rbx
    1ae0:	5d                   	pop    %rbp
    1ae1:	c3                   	ret
    1ae2:	e8 b9 f8 ff ff       	call   13a0 <__stack_chk_fail@plt>
    1ae7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1aee:	00 00 

0000000000001af0 <_Z11update_ledsP8GameData>:

// Update LEDs based on game state
void update_leds(GameData* game) {
    1af0:	f3 0f 1e fa          	endbr64
    1af4:	53                   	push   %rbx
    1af5:	48 89 fb             	mov    %rdi,%rbx
    1af8:	48 83 ec 10          	sub    $0x10,%rsp
    if (game->fpga_fd < 0) return;
    1afc:	8b 7f 38             	mov    0x38(%rdi),%edi
void update_leds(GameData* game) {
    1aff:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1b06:	00 00 
    1b08:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1b0d:	31 c0                	xor    %eax,%eax
    if (game->fpga_fd < 0) return;
    1b0f:	85 ff                	test   %edi,%edi
    1b11:	0f 88 a8 00 00 00    	js     1bbf <_Z11update_ledsP8GameData+0xcf>
    
    uint32_t red_pattern = 0;
    uint32_t green_pattern = 0;
    
    switch (game->state) {
    1b17:	8b 03                	mov    (%rbx),%eax
    uint32_t red_pattern = 0;
    1b19:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
    uint32_t green_pattern = 0;
    1b20:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    1b27:	00 
    switch (game->state) {
    1b28:	83 f8 02             	cmp    $0x2,%eax
    1b2b:	0f 84 bf 00 00 00    	je     1bf0 <_Z11update_ledsP8GameData+0x100>
    1b31:	0f 87 a1 00 00 00    	ja     1bd8 <_Z11update_ledsP8GameData+0xe8>
    1b37:	85 c0                	test   %eax,%eax
    1b39:	0f 84 c1 00 00 00    	je     1c00 <_Z11update_ledsP8GameData+0x110>
            
        case GAME_PLAYING:
            // Show ball position with LEDs
            // Red LEDs represent ball X position (left side)
            // Green LEDs represent ball Y position (relative)
            red_pattern = (uint32_t)(game->ball.x / WINDOW_WIDTH * 32) & 0xFFFFFFFF;
    1b3f:	f3 0f 10 0d c1 14 00 	movss  0x14c1(%rip),%xmm1        # 3008 <_IO_stdin_used+0x8>
    1b46:	00 
    1b47:	f3 0f 10 43 04       	movss  0x4(%rbx),%xmm0
    1b4c:	f3 0f 5e 05 b0 14 00 	divss  0x14b0(%rip),%xmm0        # 3004 <_IO_stdin_used+0x4>
    1b53:	00 
    1b54:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
    1b58:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
            green_pattern = (uint32_t)(game->ball.y / WINDOW_HEIGHT * 32) & 0xFFFFFFFF;
    1b5d:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
    1b62:	f3 0f 5e 05 a2 14 00 	divss  0x14a2(%rip),%xmm0        # 300c <_IO_stdin_used+0xc>
    1b69:	00 
    1b6a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
            red_pattern = (uint32_t)(game->ball.x / WINDOW_WIDTH * 32) & 0xFFFFFFFF;
    1b6e:	89 04 24             	mov    %eax,(%rsp)
            green_pattern = (uint32_t)(game->ball.y / WINDOW_HEIGHT * 32) & 0xFFFFFFFF;
    1b71:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
    1b76:	89 44 24 04          	mov    %eax,0x4(%rsp)
            }
            break;
    }
    
    // Write to hardware - CRITICAL: Always call ioctl() before write()
    if (ioctl(game->fpga_fd, WR_RED_LEDS) >= 0) {
    1b7a:	31 c0                	xor    %eax,%eax
    1b7c:	be 65 61 00 00       	mov    $0x6165,%esi
    1b81:	e8 3a f8 ff ff       	call   13c0 <ioctl@plt>
    1b86:	85 c0                	test   %eax,%eax
    1b88:	78 10                	js     1b9a <_Z11update_ledsP8GameData+0xaa>
        write(game->fpga_fd, &red_pattern, sizeof(red_pattern));
    1b8a:	8b 7b 38             	mov    0x38(%rbx),%edi
    1b8d:	48 89 e6             	mov    %rsp,%rsi
    1b90:	ba 04 00 00 00       	mov    $0x4,%edx
    1b95:	e8 36 f7 ff ff       	call   12d0 <write@plt>
    }
    
    if (ioctl(game->fpga_fd, WR_GREEN_LEDS) >= 0) {
    1b9a:	8b 7b 38             	mov    0x38(%rbx),%edi
    1b9d:	31 c0                	xor    %eax,%eax
    1b9f:	be 66 61 00 00       	mov    $0x6166,%esi
    1ba4:	e8 17 f8 ff ff       	call   13c0 <ioctl@plt>
    1ba9:	85 c0                	test   %eax,%eax
    1bab:	78 12                	js     1bbf <_Z11update_ledsP8GameData+0xcf>
        write(game->fpga_fd, &green_pattern, sizeof(green_pattern));
    1bad:	8b 7b 38             	mov    0x38(%rbx),%edi
    1bb0:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    1bb5:	ba 04 00 00 00       	mov    $0x4,%edx
    1bba:	e8 11 f7 ff ff       	call   12d0 <write@plt>
    }
}
    1bbf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1bc4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1bcb:	00 00 
    1bcd:	75 3e                	jne    1c0d <_Z11update_ledsP8GameData+0x11d>
    1bcf:	48 83 c4 10          	add    $0x10,%rsp
    1bd3:	5b                   	pop    %rbx
    1bd4:	c3                   	ret
    1bd5:	0f 1f 00             	nopl   (%rax)
    switch (game->state) {
    1bd8:	83 f8 03             	cmp    $0x3,%eax
    1bdb:	75 9d                	jne    1b7a <_Z11update_ledsP8GameData+0x8a>
            if (game->winner == 1) {
    1bdd:	83 7b 2c 01          	cmpl   $0x1,0x2c(%rbx)
    1be1:	75 0d                	jne    1bf0 <_Z11update_ledsP8GameData+0x100>
                green_pattern = 0xFFFFFFFF; // Player 1 wins
    1be3:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
    1bea:	ff 
    1beb:	eb 8d                	jmp    1b7a <_Z11update_ledsP8GameData+0x8a>
    1bed:	0f 1f 00             	nopl   (%rax)
                red_pattern = 0xFFFFFFFF;   // Player 2 wins
    1bf0:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%rsp)
    1bf7:	e9 7e ff ff ff       	jmp    1b7a <_Z11update_ledsP8GameData+0x8a>
    1bfc:	0f 1f 40 00          	nopl   0x0(%rax)
            green_pattern = 0x55555555; // Alternating LEDs
    1c00:	c7 44 24 04 55 55 55 	movl   $0x55555555,0x4(%rsp)
    1c07:	55 
            break;
    1c08:	e9 6d ff ff ff       	jmp    1b7a <_Z11update_ledsP8GameData+0x8a>
}
    1c0d:	e8 8e f7 ff ff       	call   13a0 <__stack_chk_fail@plt>
    1c12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    1c19:	00 00 00 00 
    1c1d:	0f 1f 00             	nopl   (%rax)

0000000000001c20 <_Z16score_to_displayi>:

// Convert score to 7-segment display pattern
uint32_t score_to_display(int score) {
    1c20:	f3 0f 1e fa          	endbr64
    1c24:	48 83 ec 38          	sub    $0x38,%rsp
    uint32_t patterns[] = {
    1c28:	66 0f 6f 05 20 19 00 	movdqa 0x1920(%rip),%xmm0        # 3550 <_IO_stdin_used+0x550>
    1c2f:	00 
uint32_t score_to_display(int score) {
    1c30:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1c37:	00 00 
    1c39:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    1c3e:	31 c0                	xor    %eax,%eax
    uint32_t patterns[] = {
    1c40:	48 8b 05 49 19 00 00 	mov    0x1949(%rip),%rax        # 3590 <_IO_stdin_used+0x590>
    1c47:	0f 29 04 24          	movaps %xmm0,(%rsp)
    1c4b:	66 0f 6f 05 0d 19 00 	movdqa 0x190d(%rip),%xmm0        # 3560 <_IO_stdin_used+0x560>
    1c52:	00 
    1c53:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    1c58:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
        HEX_0, HEX_1, HEX_2, HEX_3, HEX_4,
        HEX_5, HEX_6, HEX_7, HEX_8, HEX_9
    };
    
    if (score >= 0 && score <= 9) {
    1c5d:	83 ff 09             	cmp    $0x9,%edi
    1c60:	76 1c                	jbe    1c7e <_Z16score_to_displayi+0x5e>
        return patterns[score];
    }
    
    // For scores > 9, show last digit
    return patterns[score % 10];
    1c62:	48 63 c7             	movslq %edi,%rax
    1c65:	89 fa                	mov    %edi,%edx
    1c67:	48 69 c0 67 66 66 66 	imul   $0x66666667,%rax,%rax
    1c6e:	c1 fa 1f             	sar    $0x1f,%edx
    1c71:	48 c1 f8 22          	sar    $0x22,%rax
    1c75:	29 d0                	sub    %edx,%eax
    1c77:	8d 04 80             	lea    (%rax,%rax,4),%eax
    1c7a:	01 c0                	add    %eax,%eax
    1c7c:	29 c7                	sub    %eax,%edi
    1c7e:	48 63 ff             	movslq %edi,%rdi
    1c81:	8b 04 bc             	mov    (%rsp,%rdi,4),%eax
}
    1c84:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
    1c89:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1c90:	00 00 
    1c92:	75 05                	jne    1c99 <_Z16score_to_displayi+0x79>
    1c94:	48 83 c4 38          	add    $0x38,%rsp
    1c98:	c3                   	ret
    1c99:	e8 02 f7 ff ff       	call   13a0 <__stack_chk_fail@plt>
    1c9e:	66 90                	xchg   %ax,%ax

0000000000001ca0 <_Z15update_displaysP8GameData>:

// Update 7-segment displays with scores
void update_displays(GameData* game) {
    1ca0:	f3 0f 1e fa          	endbr64
    1ca4:	53                   	push   %rbx
    1ca5:	48 89 fb             	mov    %rdi,%rbx
    1ca8:	48 83 ec 40          	sub    $0x40,%rsp
    if (game->fpga_fd < 0) return;
    1cac:	8b 7f 38             	mov    0x38(%rdi),%edi
void update_displays(GameData* game) {
    1caf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1cb6:	00 00 
    1cb8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    1cbd:	31 c0                	xor    %eax,%eax
    if (game->fpga_fd < 0) return;
    1cbf:	85 ff                	test   %edi,%edi
    1cc1:	0f 88 b6 00 00 00    	js     1d7d <_Z15update_displaysP8GameData+0xdd>
    uint32_t patterns[] = {
    1cc7:	66 0f 6f 0d 81 18 00 	movdqa 0x1881(%rip),%xmm1        # 3550 <_IO_stdin_used+0x550>
    1cce:	00 
    1ccf:	66 0f 6f 05 89 18 00 	movdqa 0x1889(%rip),%xmm0        # 3560 <_IO_stdin_used+0x560>
    1cd6:	00 
    1cd7:	48 8b 0d b2 18 00 00 	mov    0x18b2(%rip),%rcx        # 3590 <_IO_stdin_used+0x590>
    
    // Left display shows Player 1 score
    uint32_t left_pattern = score_to_display(game->player1.score);
    1cde:	48 63 43 1c          	movslq 0x1c(%rbx),%rax
    uint32_t patterns[] = {
    1ce2:	0f 29 4c 24 10       	movaps %xmm1,0x10(%rsp)
    1ce7:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    1cec:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
    if (score >= 0 && score <= 9) {
    1cf1:	83 f8 09             	cmp    $0x9,%eax
    1cf4:	76 1e                	jbe    1d14 <_Z15update_displaysP8GameData+0x74>
    return patterns[score % 10];
    1cf6:	48 63 d0             	movslq %eax,%rdx
    1cf9:	89 c6                	mov    %eax,%esi
    1cfb:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    1d02:	c1 fe 1f             	sar    $0x1f,%esi
    1d05:	48 c1 fa 22          	sar    $0x22,%rdx
    1d09:	29 f2                	sub    %esi,%edx
    1d0b:	8d 14 92             	lea    (%rdx,%rdx,4),%edx
    1d0e:	01 d2                	add    %edx,%edx
    1d10:	29 d0                	sub    %edx,%eax
    1d12:	48 98                	cltq
    1d14:	8b 44 84 10          	mov    0x10(%rsp,%rax,4),%eax
    uint32_t patterns[] = {
    1d18:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    1d1d:	0f 29 4c 24 10       	movaps %xmm1,0x10(%rsp)
    uint32_t left_pattern = score_to_display(game->player1.score);
    1d22:	89 44 24 08          	mov    %eax,0x8(%rsp)
    
    // Right display shows Player 2 score  
    uint32_t right_pattern = score_to_display(game->player2.score);
    1d26:	48 63 43 28          	movslq 0x28(%rbx),%rax
    uint32_t patterns[] = {
    1d2a:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
    if (score >= 0 && score <= 9) {
    1d2f:	83 f8 09             	cmp    $0x9,%eax
    1d32:	76 1e                	jbe    1d52 <_Z15update_displaysP8GameData+0xb2>
    return patterns[score % 10];
    1d34:	48 63 d0             	movslq %eax,%rdx
    1d37:	89 c1                	mov    %eax,%ecx
    1d39:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    1d40:	c1 f9 1f             	sar    $0x1f,%ecx
    1d43:	48 c1 fa 22          	sar    $0x22,%rdx
    1d47:	29 ca                	sub    %ecx,%edx
    1d49:	8d 14 92             	lea    (%rdx,%rdx,4),%edx
    1d4c:	01 d2                	add    %edx,%edx
    1d4e:	29 d0                	sub    %edx,%eax
    1d50:	48 98                	cltq
    1d52:	8b 44 84 10          	mov    0x10(%rsp,%rax,4),%eax
    
    // Write to hardware - CRITICAL: Always call ioctl() before write()
    if (ioctl(game->fpga_fd, WR_L_DISPLAY) >= 0) {
    1d56:	be 63 61 00 00       	mov    $0x6163,%esi
    uint32_t right_pattern = score_to_display(game->player2.score);
    1d5b:	89 44 24 0c          	mov    %eax,0xc(%rsp)
    if (ioctl(game->fpga_fd, WR_L_DISPLAY) >= 0) {
    1d5f:	31 c0                	xor    %eax,%eax
    1d61:	e8 5a f6 ff ff       	call   13c0 <ioctl@plt>
    1d66:	85 c0                	test   %eax,%eax
    1d68:	79 46                	jns    1db0 <_Z15update_displaysP8GameData+0x110>
        write(game->fpga_fd, &left_pattern, sizeof(left_pattern));
    }
    
    if (ioctl(game->fpga_fd, WR_R_DISPLAY) >= 0) {
    1d6a:	8b 7b 38             	mov    0x38(%rbx),%edi
    1d6d:	31 c0                	xor    %eax,%eax
    1d6f:	be 64 61 00 00       	mov    $0x6164,%esi
    1d74:	e8 47 f6 ff ff       	call   13c0 <ioctl@plt>
    1d79:	85 c0                	test   %eax,%eax
    1d7b:	79 1b                	jns    1d98 <_Z15update_displaysP8GameData+0xf8>
        write(game->fpga_fd, &right_pattern, sizeof(right_pattern));
    }
}
    1d7d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    1d82:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1d89:	00 00 
    1d8b:	75 37                	jne    1dc4 <_Z15update_displaysP8GameData+0x124>
    1d8d:	48 83 c4 40          	add    $0x40,%rsp
    1d91:	5b                   	pop    %rbx
    1d92:	c3                   	ret
    1d93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        write(game->fpga_fd, &right_pattern, sizeof(right_pattern));
    1d98:	8b 7b 38             	mov    0x38(%rbx),%edi
    1d9b:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    1da0:	ba 04 00 00 00       	mov    $0x4,%edx
    1da5:	e8 26 f5 ff ff       	call   12d0 <write@plt>
    1daa:	eb d1                	jmp    1d7d <_Z15update_displaysP8GameData+0xdd>
    1dac:	0f 1f 40 00          	nopl   0x0(%rax)
        write(game->fpga_fd, &left_pattern, sizeof(left_pattern));
    1db0:	8b 7b 38             	mov    0x38(%rbx),%edi
    1db3:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    1db8:	ba 04 00 00 00       	mov    $0x4,%edx
    1dbd:	e8 0e f5 ff ff       	call   12d0 <write@plt>
    1dc2:	eb a6                	jmp    1d6a <_Z15update_displaysP8GameData+0xca>
}
    1dc4:	e8 d7 f5 ff ff       	call   13a0 <__stack_chk_fail@plt>
    1dc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001dd0 <_Z20read_hardware_inputsP8GameData>:

// Read switches and buttons (for future features)
void read_hardware_inputs(GameData* game) {
    1dd0:	f3 0f 1e fa          	endbr64
    1dd4:	53                   	push   %rbx
    1dd5:	48 89 fb             	mov    %rdi,%rbx
    1dd8:	48 83 ec 10          	sub    $0x10,%rsp
    if (game->fpga_fd < 0) return;
    1ddc:	8b 7f 38             	mov    0x38(%rdi),%edi
void read_hardware_inputs(GameData* game) {
    1ddf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1de6:	00 00 
    1de8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1ded:	31 c0                	xor    %eax,%eax
    if (game->fpga_fd < 0) return;
    1def:	85 ff                	test   %edi,%edi
    1df1:	78 21                	js     1e14 <_Z20read_hardware_inputsP8GameData+0x44>
    
    uint32_t data;
    
    // Read switches
    if (ioctl(game->fpga_fd, RD_SWITCHES) >= 0) {
    1df3:	be 61 61 00 00       	mov    $0x6161,%esi
    1df8:	e8 c3 f5 ff ff       	call   13c0 <ioctl@plt>
    1dfd:	85 c0                	test   %eax,%eax
    1dff:	79 4f                	jns    1e50 <_Z20read_hardware_inputsP8GameData+0x80>
            game->switches = data;
        }
    }
    
    // Read push buttons
    if (ioctl(game->fpga_fd, RD_PBUTTONS) >= 0) {
    1e01:	8b 7b 38             	mov    0x38(%rbx),%edi
    1e04:	31 c0                	xor    %eax,%eax
    1e06:	be 62 61 00 00       	mov    $0x6162,%esi
    1e0b:	e8 b0 f5 ff ff       	call   13c0 <ioctl@plt>
    1e10:	85 c0                	test   %eax,%eax
    1e12:	79 1c                	jns    1e30 <_Z20read_hardware_inputsP8GameData+0x60>
    // You can use switches/buttons for:
    // - Switch 0: Change ball speed
    // - Switch 1: Enable/disable AI for player 2
    // - Button 0: Pause game
    // - Button 1: Reset game
}
    1e14:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1e19:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1e20:	00 00 
    1e22:	75 4c                	jne    1e70 <_Z20read_hardware_inputsP8GameData+0xa0>
    1e24:	48 83 c4 10          	add    $0x10,%rsp
    1e28:	5b                   	pop    %rbx
    1e29:	c3                   	ret
    1e2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
# include <bits/unistd-decl.h>

__fortify_function __wur ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  return __glibc_fortify (read, __nbytes, sizeof (char),
    1e30:	8b 7b 38             	mov    0x38(%rbx),%edi
    1e33:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    1e38:	ba 04 00 00 00       	mov    $0x4,%edx
    1e3d:	e8 ae f5 ff ff       	call   13f0 <read@plt>
        if (read(game->fpga_fd, &data, sizeof(data)) > 0) {
    1e42:	48 85 c0             	test   %rax,%rax
    1e45:	7e cd                	jle    1e14 <_Z20read_hardware_inputsP8GameData+0x44>
            game->buttons = data;
    1e47:	8b 44 24 04          	mov    0x4(%rsp),%eax
    1e4b:	89 43 34             	mov    %eax,0x34(%rbx)
    1e4e:	eb c4                	jmp    1e14 <_Z20read_hardware_inputsP8GameData+0x44>
    1e50:	8b 7b 38             	mov    0x38(%rbx),%edi
    1e53:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    1e58:	ba 04 00 00 00       	mov    $0x4,%edx
    1e5d:	e8 8e f5 ff ff       	call   13f0 <read@plt>
        if (read(game->fpga_fd, &data, sizeof(data)) > 0) {
    1e62:	48 85 c0             	test   %rax,%rax
    1e65:	7e 9a                	jle    1e01 <_Z20read_hardware_inputsP8GameData+0x31>
            game->switches = data;
    1e67:	8b 44 24 04          	mov    0x4(%rsp),%eax
    1e6b:	89 43 30             	mov    %eax,0x30(%rbx)
    1e6e:	eb 91                	jmp    1e01 <_Z20read_hardware_inputsP8GameData+0x31>
}
    1e70:	e8 2b f5 ff ff       	call   13a0 <__stack_chk_fail@plt>
    1e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    1e7c:	00 00 00 00 

0000000000001e80 <_Z15hardware_threadPv>:

// Hardware monitoring thread
void* hardware_thread(void* arg) {
    1e80:	f3 0f 1e fa          	endbr64
    1e84:	41 54                	push   %r12
    1e86:	55                   	push   %rbp
    1e87:	53                   	push   %rbx
    1e88:	48 89 fb             	mov    %rdi,%rbx
    1e8b:	48 8d 3d fd 15 00 00 	lea    0x15fd(%rip),%rdi        # 348f <_IO_stdin_used+0x48f>
    1e92:	48 83 ec 10          	sub    $0x10,%rsp
    1e96:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1e9d:	00 00 
    1e9f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1ea4:	31 c0                	xor    %eax,%eax
    1ea6:	e8 75 f5 ff ff       	call   1420 <puts@plt>
    GameData* game = (GameData*)arg;
    
    printf("Hardware thread started\n");
    
    while (game->running) {
    1eab:	8b 53 68             	mov    0x68(%rbx),%edx
    1eae:	85 d2                	test   %edx,%edx
    1eb0:	0f 84 a2 01 00 00    	je     2058 <_Z15hardware_threadPv+0x1d8>
    1eb6:	48 8d 6b 40          	lea    0x40(%rbx),%rbp
        write(game->fpga_fd, &green_pattern, sizeof(green_pattern));
    1eba:	4c 8d 64 24 04       	lea    0x4(%rsp),%r12
    1ebf:	e9 f1 00 00 00       	jmp    1fb5 <_Z15hardware_threadPv+0x135>
    1ec4:	0f 1f 40 00          	nopl   0x0(%rax)
    if (ioctl(game->fpga_fd, RD_PBUTTONS) >= 0) {
    1ec8:	8b 7b 38             	mov    0x38(%rbx),%edi
    1ecb:	31 c0                	xor    %eax,%eax
    1ecd:	be 62 61 00 00       	mov    $0x6162,%esi
    1ed2:	e8 e9 f4 ff ff       	call   13c0 <ioctl@plt>
    1ed7:	85 c0                	test   %eax,%eax
    1ed9:	0f 89 41 01 00 00    	jns    2020 <_Z15hardware_threadPv+0x1a0>
    if (game->fpga_fd < 0) return;
    1edf:	8b 7b 38             	mov    0x38(%rbx),%edi
    1ee2:	85 ff                	test   %edi,%edi
    1ee4:	0f 88 a6 00 00 00    	js     1f90 <_Z15hardware_threadPv+0x110>
    switch (game->state) {
    1eea:	8b 03                	mov    (%rbx),%eax
    uint32_t red_pattern = 0;
    1eec:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
    uint32_t green_pattern = 0;
    1ef3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    1efa:	00 
    switch (game->state) {
    1efb:	83 f8 02             	cmp    $0x2,%eax
    1efe:	0f 84 0b 01 00 00    	je     200f <_Z15hardware_threadPv+0x18f>
    1f04:	0f 87 f6 00 00 00    	ja     2000 <_Z15hardware_threadPv+0x180>
    1f0a:	85 c0                	test   %eax,%eax
    1f0c:	0f 84 36 01 00 00    	je     2048 <_Z15hardware_threadPv+0x1c8>
            red_pattern = (uint32_t)(game->ball.x / WINDOW_WIDTH * 32) & 0xFFFFFFFF;
    1f12:	f3 0f 10 43 04       	movss  0x4(%rbx),%xmm0
    1f17:	f3 0f 5e 05 e5 10 00 	divss  0x10e5(%rip),%xmm0        # 3004 <_IO_stdin_used+0x4>
    1f1e:	00 
    1f1f:	f3 0f 59 05 e1 10 00 	mulss  0x10e1(%rip),%xmm0        # 3008 <_IO_stdin_used+0x8>
    1f26:	00 
    1f27:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
            green_pattern = (uint32_t)(game->ball.y / WINDOW_HEIGHT * 32) & 0xFFFFFFFF;
    1f2c:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
    1f31:	f3 0f 5e 05 d3 10 00 	divss  0x10d3(%rip),%xmm0        # 300c <_IO_stdin_used+0xc>
    1f38:	00 
    1f39:	f3 0f 59 05 c7 10 00 	mulss  0x10c7(%rip),%xmm0        # 3008 <_IO_stdin_used+0x8>
    1f40:	00 
            red_pattern = (uint32_t)(game->ball.x / WINDOW_WIDTH * 32) & 0xFFFFFFFF;
    1f41:	89 04 24             	mov    %eax,(%rsp)
            green_pattern = (uint32_t)(game->ball.y / WINDOW_HEIGHT * 32) & 0xFFFFFFFF;
    1f44:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
    1f49:	89 44 24 04          	mov    %eax,0x4(%rsp)
    if (ioctl(game->fpga_fd, WR_RED_LEDS) >= 0) {
    1f4d:	31 c0                	xor    %eax,%eax
    1f4f:	be 65 61 00 00       	mov    $0x6165,%esi
    1f54:	e8 67 f4 ff ff       	call   13c0 <ioctl@plt>
    1f59:	85 c0                	test   %eax,%eax
    1f5b:	78 10                	js     1f6d <_Z15hardware_threadPv+0xed>
        write(game->fpga_fd, &red_pattern, sizeof(red_pattern));
    1f5d:	8b 7b 38             	mov    0x38(%rbx),%edi
    1f60:	48 89 e6             	mov    %rsp,%rsi
    1f63:	ba 04 00 00 00       	mov    $0x4,%edx
    1f68:	e8 63 f3 ff ff       	call   12d0 <write@plt>
    if (ioctl(game->fpga_fd, WR_GREEN_LEDS) >= 0) {
    1f6d:	8b 7b 38             	mov    0x38(%rbx),%edi
    1f70:	31 c0                	xor    %eax,%eax
    1f72:	be 66 61 00 00       	mov    $0x6166,%esi
    1f77:	e8 44 f4 ff ff       	call   13c0 <ioctl@plt>
    1f7c:	85 c0                	test   %eax,%eax
    1f7e:	78 10                	js     1f90 <_Z15hardware_threadPv+0x110>
        write(game->fpga_fd, &green_pattern, sizeof(green_pattern));
    1f80:	8b 7b 38             	mov    0x38(%rbx),%edi
    1f83:	ba 04 00 00 00       	mov    $0x4,%edx
    1f88:	4c 89 e6             	mov    %r12,%rsi
    1f8b:	e8 40 f3 ff ff       	call   12d0 <write@plt>
        // Read inputs
        read_hardware_inputs(game);
        
        // Update outputs
        update_leds(game);
        update_displays(game);
    1f90:	48 89 df             	mov    %rbx,%rdi
    1f93:	e8 08 fd ff ff       	call   1ca0 <_Z15update_displaysP8GameData>
        
        pthread_mutex_unlock(&game->mutex);
    1f98:	48 89 ef             	mov    %rbp,%rdi
    1f9b:	e8 b0 f3 ff ff       	call   1350 <pthread_mutex_unlock@plt>
        
        // Update at 30Hz to avoid overwhelming the hardware
        usleep(33333); // ~30 FPS
    1fa0:	bf 35 82 00 00       	mov    $0x8235,%edi
    1fa5:	e8 26 f4 ff ff       	call   13d0 <usleep@plt>
    while (game->running) {
    1faa:	8b 43 68             	mov    0x68(%rbx),%eax
    1fad:	85 c0                	test   %eax,%eax
    1faf:	0f 84 a3 00 00 00    	je     2058 <_Z15hardware_threadPv+0x1d8>
        pthread_mutex_lock(&game->mutex);
    1fb5:	48 89 ef             	mov    %rbp,%rdi
    1fb8:	e8 43 f4 ff ff       	call   1400 <pthread_mutex_lock@plt>
    if (game->fpga_fd < 0) return;
    1fbd:	8b 7b 38             	mov    0x38(%rbx),%edi
    1fc0:	85 ff                	test   %edi,%edi
    1fc2:	78 cc                	js     1f90 <_Z15hardware_threadPv+0x110>
    if (ioctl(game->fpga_fd, RD_SWITCHES) >= 0) {
    1fc4:	31 c0                	xor    %eax,%eax
    1fc6:	be 61 61 00 00       	mov    $0x6161,%esi
    1fcb:	e8 f0 f3 ff ff       	call   13c0 <ioctl@plt>
    1fd0:	85 c0                	test   %eax,%eax
    1fd2:	0f 88 f0 fe ff ff    	js     1ec8 <_Z15hardware_threadPv+0x48>
    1fd8:	8b 7b 38             	mov    0x38(%rbx),%edi
    1fdb:	ba 04 00 00 00       	mov    $0x4,%edx
    1fe0:	4c 89 e6             	mov    %r12,%rsi
    1fe3:	e8 08 f4 ff ff       	call   13f0 <read@plt>
        if (read(game->fpga_fd, &data, sizeof(data)) > 0) {
    1fe8:	48 85 c0             	test   %rax,%rax
    1feb:	0f 8e d7 fe ff ff    	jle    1ec8 <_Z15hardware_threadPv+0x48>
            game->switches = data;
    1ff1:	8b 44 24 04          	mov    0x4(%rsp),%eax
    1ff5:	89 43 30             	mov    %eax,0x30(%rbx)
    1ff8:	e9 cb fe ff ff       	jmp    1ec8 <_Z15hardware_threadPv+0x48>
    1ffd:	0f 1f 00             	nopl   (%rax)
    switch (game->state) {
    2000:	83 f8 03             	cmp    $0x3,%eax
    2003:	0f 85 44 ff ff ff    	jne    1f4d <_Z15hardware_threadPv+0xcd>
            if (game->winner == 1) {
    2009:	83 7b 2c 01          	cmpl   $0x1,0x2c(%rbx)
    200d:	74 71                	je     2080 <_Z15hardware_threadPv+0x200>
                red_pattern = 0xFFFFFFFF;   // Player 2 wins
    200f:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%rsp)
    2016:	e9 32 ff ff ff       	jmp    1f4d <_Z15hardware_threadPv+0xcd>
    201b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2020:	8b 7b 38             	mov    0x38(%rbx),%edi
    2023:	ba 04 00 00 00       	mov    $0x4,%edx
    2028:	4c 89 e6             	mov    %r12,%rsi
    202b:	e8 c0 f3 ff ff       	call   13f0 <read@plt>
        if (read(game->fpga_fd, &data, sizeof(data)) > 0) {
    2030:	48 85 c0             	test   %rax,%rax
    2033:	0f 8e a6 fe ff ff    	jle    1edf <_Z15hardware_threadPv+0x5f>
            game->buttons = data;
    2039:	8b 44 24 04          	mov    0x4(%rsp),%eax
    203d:	89 43 34             	mov    %eax,0x34(%rbx)
    2040:	e9 9a fe ff ff       	jmp    1edf <_Z15hardware_threadPv+0x5f>
    2045:	0f 1f 00             	nopl   (%rax)
            green_pattern = 0x55555555; // Alternating LEDs
    2048:	c7 44 24 04 55 55 55 	movl   $0x55555555,0x4(%rsp)
    204f:	55 
            break;
    2050:	e9 f8 fe ff ff       	jmp    1f4d <_Z15hardware_threadPv+0xcd>
    2055:	0f 1f 00             	nopl   (%rax)
    2058:	48 8d 3d 48 14 00 00 	lea    0x1448(%rip),%rdi        # 34a7 <_IO_stdin_used+0x4a7>
    205f:	e8 bc f3 ff ff       	call   1420 <puts@plt>
    }
    
    printf("Hardware thread finished\n");
    return NULL;
}
    2064:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    2069:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    2070:	00 00 
    2072:	75 19                	jne    208d <_Z15hardware_threadPv+0x20d>
    2074:	48 83 c4 10          	add    $0x10,%rsp
    2078:	31 c0                	xor    %eax,%eax
    207a:	5b                   	pop    %rbx
    207b:	5d                   	pop    %rbp
    207c:	41 5c                	pop    %r12
    207e:	c3                   	ret
    207f:	90                   	nop
                green_pattern = 0xFFFFFFFF; // Player 1 wins
    2080:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
    2087:	ff 
    2088:	e9 c0 fe ff ff       	jmp    1f4d <_Z15hardware_threadPv+0xcd>
}
    208d:	e8 0e f3 ff ff       	call   13a0 <__stack_chk_fail@plt>
    2092:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    2099:	00 00 00 
    209c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000020a0 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer>:
int init_graphics(SDL_Window** window, SDL_Renderer** renderer) {
    20a0:	f3 0f 1e fa          	endbr64
    20a4:	55                   	push   %rbp
    20a5:	48 89 fd             	mov    %rdi,%rbp
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
    20a8:	bf 20 00 00 00       	mov    $0x20,%edi
int init_graphics(SDL_Window** window, SDL_Renderer** renderer) {
    20ad:	53                   	push   %rbx
    20ae:	48 89 f3             	mov    %rsi,%rbx
    20b1:	48 83 ec 08          	sub    $0x8,%rsp
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
    20b5:	e8 b6 f2 ff ff       	call   1370 <SDL_Init@plt>
    20ba:	85 c0                	test   %eax,%eax
    20bc:	78 53                	js     2111 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x71>
    *window = SDL_CreateWindow("FPGA Pong", 
    20be:	41 b9 04 00 00 00    	mov    $0x4,%r9d
    20c4:	41 b8 58 02 00 00    	mov    $0x258,%r8d
    20ca:	b9 20 03 00 00       	mov    $0x320,%ecx
    20cf:	ba 00 00 ff 2f       	mov    $0x2fff0000,%edx
    20d4:	48 8d 3d fa 13 00 00 	lea    0x13fa(%rip),%rdi        # 34d5 <_IO_stdin_used+0x4d5>
    20db:	be 00 00 ff 2f       	mov    $0x2fff0000,%esi
    20e0:	e8 ab f1 ff ff       	call   1290 <SDL_CreateWindow@plt>
    20e5:	48 89 45 00          	mov    %rax,0x0(%rbp)
    20e9:	48 89 c7             	mov    %rax,%rdi
    if (!*window) {
    20ec:	48 85 c0             	test   %rax,%rax
    20ef:	74 42                	je     2133 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x93>
    *renderer = SDL_CreateRenderer(*window, -1, SDL_RENDERER_ACCELERATED);
    20f1:	ba 02 00 00 00       	mov    $0x2,%edx
    20f6:	be ff ff ff ff       	mov    $0xffffffff,%esi
    20fb:	e8 70 f1 ff ff       	call   1270 <SDL_CreateRenderer@plt>
    2100:	48 89 03             	mov    %rax,(%rbx)
    if (!*renderer) {
    2103:	48 85 c0             	test   %rax,%rax
    2106:	74 48                	je     2150 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0xb0>
    return 0;
    2108:	31 c0                	xor    %eax,%eax
}
    210a:	48 83 c4 08          	add    $0x8,%rsp
    210e:	5b                   	pop    %rbx
    210f:	5d                   	pop    %rbp
    2110:	c3                   	ret
        printf("SDL init failed: %s\n", SDL_GetError());
    2111:	e8 1a f2 ff ff       	call   1330 <SDL_GetError@plt>
    2116:	48 8d 35 a3 13 00 00 	lea    0x13a3(%rip),%rsi        # 34c0 <_IO_stdin_used+0x4c0>
    211d:	bf 02 00 00 00       	mov    $0x2,%edi
    2122:	48 89 c2             	mov    %rax,%rdx
    2125:	31 c0                	xor    %eax,%eax
    2127:	e8 24 f1 ff ff       	call   1250 <__printf_chk@plt>
        return -1;
    212c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    2131:	eb d7                	jmp    210a <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x6a>
        printf("Window creation failed: %s\n", SDL_GetError());
    2133:	e8 f8 f1 ff ff       	call   1330 <SDL_GetError@plt>
    2138:	48 8d 35 a0 13 00 00 	lea    0x13a0(%rip),%rsi        # 34df <_IO_stdin_used+0x4df>
    213f:	bf 02 00 00 00       	mov    $0x2,%edi
    2144:	48 89 c2             	mov    %rax,%rdx
    2147:	31 c0                	xor    %eax,%eax
    2149:	e8 02 f1 ff ff       	call   1250 <__printf_chk@plt>
        return -1;
    214e:	eb dc                	jmp    212c <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x8c>
        printf("Renderer creation failed: %s\n", SDL_GetError());
    2150:	e8 db f1 ff ff       	call   1330 <SDL_GetError@plt>
    2155:	48 8d 35 9f 13 00 00 	lea    0x139f(%rip),%rsi        # 34fb <_IO_stdin_used+0x4fb>
    215c:	bf 02 00 00 00       	mov    $0x2,%edi
    2161:	48 89 c2             	mov    %rax,%rdx
    2164:	31 c0                	xor    %eax,%eax
    2166:	e8 e5 f0 ff ff       	call   1250 <__printf_chk@plt>
        return -1;
    216b:	eb bf                	jmp    212c <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x8c>
    216d:	0f 1f 00             	nopl   (%rax)

0000000000002170 <_Z9init_gameP8GameData>:
void init_game(GameData* game) {
    2170:	f3 0f 1e fa          	endbr64
    2174:	53                   	push   %rbx
    pthread_mutex_init(&game->mutex, NULL);
    2175:	31 f6                	xor    %esi,%esi
void init_game(GameData* game) {
    2177:	48 89 fb             	mov    %rdi,%rbx
    pthread_mutex_init(&game->mutex, NULL);
    217a:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
    217e:	e8 8d f2 ff ff       	call   1410 <pthread_mutex_init@plt>
    game->player1.x = 50;
    2183:	48 8b 05 0e 14 00 00 	mov    0x140e(%rip),%rax        # 3598 <_IO_stdin_used+0x598>
    game->ball.x = WINDOW_WIDTH / 2;
    218a:	0f 28 05 df 13 00 00 	movaps 0x13df(%rip),%xmm0        # 3570 <_IO_stdin_used+0x570>
    game->state = GAME_MENU;
    2191:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
    game->running = 1;
    2197:	c7 43 68 01 00 00 00 	movl   $0x1,0x68(%rbx)
    game->player1.x = 50;
    219e:	48 89 43 14          	mov    %rax,0x14(%rbx)
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    21a2:	48 8b 05 f7 13 00 00 	mov    0x13f7(%rip),%rax        # 35a0 <_IO_stdin_used+0x5a0>
    game->player1.score = 0;
    21a9:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    21b0:	48 89 43 20          	mov    %rax,0x20(%rbx)
    game->player2.score = 0;
    21b4:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
    game->ball.x = WINDOW_WIDTH / 2;
    21bb:	0f 11 43 04          	movups %xmm0,0x4(%rbx)
}
    21bf:	5b                   	pop    %rbx
    21c0:	c3                   	ret
    21c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    21c8:	00 00 00 00 
    21cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000021d0 <_Z11update_gameP8GameData>:
void update_game(GameData* game) {
    21d0:	f3 0f 1e fa          	endbr64
    21d4:	41 54                	push   %r12
    21d6:	55                   	push   %rbp
    pthread_mutex_lock(&game->mutex);
    21d7:	48 8d 6f 40          	lea    0x40(%rdi),%rbp
void update_game(GameData* game) {
    21db:	53                   	push   %rbx
    21dc:	48 89 fb             	mov    %rdi,%rbx
    pthread_mutex_lock(&game->mutex);
    21df:	48 89 ef             	mov    %rbp,%rdi
void update_game(GameData* game) {
    21e2:	48 83 ec 40          	sub    $0x40,%rsp
    21e6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    21ed:	00 00 
    21ef:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    21f4:	31 c0                	xor    %eax,%eax
    pthread_mutex_lock(&game->mutex);
    21f6:	e8 05 f2 ff ff       	call   1400 <pthread_mutex_lock@plt>
    if (game->state != GAME_PLAYING) {
    21fb:	83 3b 01             	cmpl   $0x1,(%rbx)
    21fe:	0f 85 2c 01 00 00    	jne    2330 <_Z11update_gameP8GameData+0x160>
    game->ball.x += game->ball.vel_x;
    2204:	f3 0f 7e 43 04       	movq   0x4(%rbx),%xmm0
    2209:	f3 0f 7e 4b 0c       	movq   0xc(%rbx),%xmm1
    220e:	0f 58 c1             	addps  %xmm1,%xmm0
    2211:	0f 28 e0             	movaps %xmm0,%xmm4
    2214:	0f 13 43 04          	movlps %xmm0,0x4(%rbx)
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2218:	f3 0f 5b d8          	cvttps2dq %xmm0,%xmm3
    if (game->ball.y <= 0 || game->ball.y >= WINDOW_HEIGHT - BALL_SIZE) {
    221c:	66 0f ef c0          	pxor   %xmm0,%xmm0
    2220:	0f c6 e4 e5          	shufps $0xe5,%xmm4,%xmm4
    2224:	0f 2f c4             	comiss %xmm4,%xmm0
    2227:	73 09                	jae    2232 <_Z11update_gameP8GameData+0x62>
    2229:	0f 2f 25 e0 0d 00 00 	comiss 0xde0(%rip),%xmm4        # 3010 <_IO_stdin_used+0x10>
    2230:	72 10                	jb     2242 <_Z11update_gameP8GameData+0x72>
        game->ball.vel_y = -game->ball.vel_y;
    2232:	0f c6 c9 e5          	shufps $0xe5,%xmm1,%xmm1
    2236:	0f 57 0d 43 13 00 00 	xorps  0x1343(%rip),%xmm1        # 3580 <_IO_stdin_used+0x580>
    223d:	f3 0f 11 4b 10       	movss  %xmm1,0x10(%rbx)
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2242:	48 8b 05 5f 13 00 00 	mov    0x135f(%rip),%rax        # 35a8 <_IO_stdin_used+0x5a8>
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    2249:	f3 0f 7e 43 14       	movq   0x14(%rbx),%xmm0
    if (SDL_HasIntersection(&ball_rect, &p1_rect) || 
    224e:	49 89 e4             	mov    %rsp,%r12
    2251:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    2256:	4c 89 e7             	mov    %r12,%rdi
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2259:	66 0f d6 1c 24       	movq   %xmm3,(%rsp)
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    225e:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2262:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    2267:	48 8b 05 42 13 00 00 	mov    0x1342(%rip),%rax        # 35b0 <_IO_stdin_used+0x5b0>
    226e:	66 0f d6 44 24 10    	movq   %xmm0,0x10(%rsp)
    SDL_Rect p2_rect = {(int)game->player2.x, (int)game->player2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    2274:	f3 0f 7e 43 20       	movq   0x20(%rbx),%xmm0
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    2279:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    SDL_Rect p2_rect = {(int)game->player2.x, (int)game->player2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    227e:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    2282:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    2287:	66 0f d6 44 24 20    	movq   %xmm0,0x20(%rsp)
    if (SDL_HasIntersection(&ball_rect, &p1_rect) || 
    228d:	e8 fe f0 ff ff       	call   1390 <SDL_HasIntersection@plt>
    2292:	85 c0                	test   %eax,%eax
    2294:	0f 84 d6 00 00 00    	je     2370 <_Z11update_gameP8GameData+0x1a0>
        game->ball.vel_x = -game->ball.vel_x;
    229a:	f3 0f 10 43 0c       	movss  0xc(%rbx),%xmm0
    229f:	0f 57 05 da 12 00 00 	xorps  0x12da(%rip),%xmm0        # 3580 <_IO_stdin_used+0x580>
    22a6:	f3 0f 11 43 0c       	movss  %xmm0,0xc(%rbx)
    if (game->ball.x < 0) {
    22ab:	f3 0f 10 43 04       	movss  0x4(%rbx),%xmm0
    22b0:	66 0f ef c9          	pxor   %xmm1,%xmm1
        game->player1.score++;
    22b4:	8b 43 1c             	mov    0x1c(%rbx),%eax
    if (game->ball.x < 0) {
    22b7:	0f 2f c8             	comiss %xmm0,%xmm1
    22ba:	0f 87 90 00 00 00    	ja     2350 <_Z11update_gameP8GameData+0x180>
    if (game->ball.x > WINDOW_WIDTH) {
    22c0:	0f 2f 05 3d 0d 00 00 	comiss 0xd3d(%rip),%xmm0        # 3004 <_IO_stdin_used+0x4>
    22c7:	76 18                	jbe    22e1 <_Z11update_gameP8GameData+0x111>
        game->ball.x = WINDOW_WIDTH / 2;
    22c9:	48 8b 15 a0 12 00 00 	mov    0x12a0(%rip),%rdx        # 3570 <_IO_stdin_used+0x570>
        game->player1.score++;
    22d0:	83 c0 01             	add    $0x1,%eax
        game->ball.vel_x = -BALL_SPEED;
    22d3:	c7 43 0c 00 00 40 c0 	movl   $0xc0400000,0xc(%rbx)
        game->player1.score++;
    22da:	89 43 1c             	mov    %eax,0x1c(%rbx)
        game->ball.x = WINDOW_WIDTH / 2;
    22dd:	48 89 53 04          	mov    %rdx,0x4(%rbx)
    if (game->player1.score >= 5 || game->player2.score >= 5) {
    22e1:	83 f8 04             	cmp    $0x4,%eax
    22e4:	7f 3a                	jg     2320 <_Z11update_gameP8GameData+0x150>
    22e6:	83 7b 28 04          	cmpl   $0x4,0x28(%rbx)
        game->winner = (game->player1.score >= 5) ? 1 : 2;
    22ea:	b8 02 00 00 00       	mov    $0x2,%eax
    if (game->player1.score >= 5 || game->player2.score >= 5) {
    22ef:	7f 34                	jg     2325 <_Z11update_gameP8GameData+0x155>
    pthread_mutex_unlock(&game->mutex);
    22f1:	48 89 ef             	mov    %rbp,%rdi
    22f4:	e8 57 f0 ff ff       	call   1350 <pthread_mutex_unlock@plt>
}
    22f9:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    22fe:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    2305:	00 00 
    2307:	0f 85 7d 00 00 00    	jne    238a <_Z11update_gameP8GameData+0x1ba>
    230d:	48 83 c4 40          	add    $0x40,%rsp
    2311:	5b                   	pop    %rbx
    2312:	5d                   	pop    %rbp
    2313:	41 5c                	pop    %r12
    2315:	c3                   	ret
    2316:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    231d:	00 00 00 
        game->winner = (game->player1.score >= 5) ? 1 : 2;
    2320:	b8 01 00 00 00       	mov    $0x1,%eax
        game->state = GAME_OVER;
    2325:	c7 03 03 00 00 00    	movl   $0x3,(%rbx)
        game->winner = (game->player1.score >= 5) ? 1 : 2;
    232b:	89 43 2c             	mov    %eax,0x2c(%rbx)
    232e:	eb c1                	jmp    22f1 <_Z11update_gameP8GameData+0x121>
        pthread_mutex_unlock(&game->mutex);
    2330:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    2335:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    233c:	00 00 
    233e:	75 4a                	jne    238a <_Z11update_gameP8GameData+0x1ba>
}
    2340:	48 83 c4 40          	add    $0x40,%rsp
        pthread_mutex_unlock(&game->mutex);
    2344:	48 89 ef             	mov    %rbp,%rdi
}
    2347:	5b                   	pop    %rbx
    2348:	5d                   	pop    %rbp
    2349:	41 5c                	pop    %r12
        pthread_mutex_unlock(&game->mutex);
    234b:	e9 00 f0 ff ff       	jmp    1350 <pthread_mutex_unlock@plt>
        game->ball.x = WINDOW_WIDTH / 2;
    2350:	48 8b 15 19 12 00 00 	mov    0x1219(%rip),%rdx        # 3570 <_IO_stdin_used+0x570>
        game->player2.score++;
    2357:	83 43 28 01          	addl   $0x1,0x28(%rbx)
        game->ball.vel_x = BALL_SPEED;
    235b:	c7 43 0c 00 00 40 40 	movl   $0x40400000,0xc(%rbx)
        game->ball.x = WINDOW_WIDTH / 2;
    2362:	48 89 53 04          	mov    %rdx,0x4(%rbx)
    if (game->ball.x > WINDOW_WIDTH) {
    2366:	e9 76 ff ff ff       	jmp    22e1 <_Z11update_gameP8GameData+0x111>
    236b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        SDL_HasIntersection(&ball_rect, &p2_rect)) {
    2370:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    2375:	4c 89 e7             	mov    %r12,%rdi
    2378:	e8 13 f0 ff ff       	call   1390 <SDL_HasIntersection@plt>
    if (SDL_HasIntersection(&ball_rect, &p1_rect) || 
    237d:	85 c0                	test   %eax,%eax
    237f:	0f 85 15 ff ff ff    	jne    229a <_Z11update_gameP8GameData+0xca>
    2385:	e9 21 ff ff ff       	jmp    22ab <_Z11update_gameP8GameData+0xdb>
}
    238a:	e8 11 f0 ff ff       	call   13a0 <__stack_chk_fail@plt>
    238f:	90                   	nop

0000000000002390 <_Z12handle_inputP8GameDataPKh>:
void handle_input(GameData* game, const Uint8* keystate) {
    2390:	f3 0f 1e fa          	endbr64
    2394:	41 54                	push   %r12
    pthread_mutex_lock(&game->mutex);
    2396:	4c 8d 67 40          	lea    0x40(%rdi),%r12
void handle_input(GameData* game, const Uint8* keystate) {
    239a:	55                   	push   %rbp
    239b:	48 89 f5             	mov    %rsi,%rbp
    239e:	53                   	push   %rbx
    239f:	48 89 fb             	mov    %rdi,%rbx
    pthread_mutex_lock(&game->mutex);
    23a2:	4c 89 e7             	mov    %r12,%rdi
    23a5:	e8 56 f0 ff ff       	call   1400 <pthread_mutex_lock@plt>
    if (keystate[SDL_SCANCODE_W] && game->player1.y > 0) {
    23aa:	80 7d 1a 00          	cmpb   $0x0,0x1a(%rbp)
    23ae:	74 1b                	je     23cb <_Z12handle_inputP8GameDataPKh+0x3b>
    23b0:	f3 0f 10 43 18       	movss  0x18(%rbx),%xmm0
    23b5:	66 0f ef c9          	pxor   %xmm1,%xmm1
    23b9:	0f 2f c1             	comiss %xmm1,%xmm0
    23bc:	76 0d                	jbe    23cb <_Z12handle_inputP8GameDataPKh+0x3b>
        game->player1.y -= PADDLE_SPEED;
    23be:	f3 0f 5c 05 4e 0c 00 	subss  0xc4e(%rip),%xmm0        # 3014 <_IO_stdin_used+0x14>
    23c5:	00 
    23c6:	f3 0f 11 43 18       	movss  %xmm0,0x18(%rbx)
    if (keystate[SDL_SCANCODE_S] && game->player1.y < WINDOW_HEIGHT - PADDLE_HEIGHT) {
    23cb:	80 7d 16 00          	cmpb   $0x0,0x16(%rbp)
    23cf:	74 16                	je     23e7 <_Z12handle_inputP8GameDataPKh+0x57>
    23d1:	f3 0f 10 43 18       	movss  0x18(%rbx),%xmm0
    23d6:	f3 0f 10 0d 3a 0c 00 	movss  0xc3a(%rip),%xmm1        # 3018 <_IO_stdin_used+0x18>
    23dd:	00 
    23de:	0f 2f c8             	comiss %xmm0,%xmm1
    23e1:	0f 87 f1 00 00 00    	ja     24d8 <_Z12handle_inputP8GameDataPKh+0x148>
    if (keystate[SDL_SCANCODE_UP] && game->player2.y > 0) {
    23e7:	80 7d 52 00          	cmpb   $0x0,0x52(%rbp)
    23eb:	74 1b                	je     2408 <_Z12handle_inputP8GameDataPKh+0x78>
    23ed:	f3 0f 10 43 24       	movss  0x24(%rbx),%xmm0
    23f2:	66 0f ef c9          	pxor   %xmm1,%xmm1
    23f6:	0f 2f c1             	comiss %xmm1,%xmm0
    23f9:	76 0d                	jbe    2408 <_Z12handle_inputP8GameDataPKh+0x78>
        game->player2.y -= PADDLE_SPEED;
    23fb:	f3 0f 5c 05 11 0c 00 	subss  0xc11(%rip),%xmm0        # 3014 <_IO_stdin_used+0x14>
    2402:	00 
    2403:	f3 0f 11 43 24       	movss  %xmm0,0x24(%rbx)
    if (keystate[SDL_SCANCODE_DOWN] && game->player2.y < WINDOW_HEIGHT - PADDLE_HEIGHT) {
    2408:	80 7d 51 00          	cmpb   $0x0,0x51(%rbp)
    240c:	74 16                	je     2424 <_Z12handle_inputP8GameDataPKh+0x94>
    240e:	f3 0f 10 43 24       	movss  0x24(%rbx),%xmm0
    2413:	f3 0f 10 0d fd 0b 00 	movss  0xbfd(%rip),%xmm1        # 3018 <_IO_stdin_used+0x18>
    241a:	00 
    241b:	0f 2f c8             	comiss %xmm0,%xmm1
    241e:	0f 87 9c 00 00 00    	ja     24c0 <_Z12handle_inputP8GameDataPKh+0x130>
    if (keystate[SDL_SCANCODE_SPACE]) {
    2424:	80 7d 2c 00          	cmpb   $0x0,0x2c(%rbp)
    2428:	74 36                	je     2460 <_Z12handle_inputP8GameDataPKh+0xd0>
        if (game->state == GAME_MENU) {
    242a:	8b 03                	mov    (%rbx),%eax
    242c:	85 c0                	test   %eax,%eax
    242e:	75 18                	jne    2448 <_Z12handle_inputP8GameDataPKh+0xb8>
    2430:	b8 01 00 00 00       	mov    $0x1,%eax
            game->state = GAME_PAUSED;
    2435:	89 03                	mov    %eax,(%rbx)
}
    2437:	5b                   	pop    %rbx
    pthread_mutex_unlock(&game->mutex);
    2438:	4c 89 e7             	mov    %r12,%rdi
}
    243b:	5d                   	pop    %rbp
    243c:	41 5c                	pop    %r12
    pthread_mutex_unlock(&game->mutex);
    243e:	e9 0d ef ff ff       	jmp    1350 <pthread_mutex_unlock@plt>
    2443:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        } else if (game->state == GAME_PLAYING) {
    2448:	83 f8 01             	cmp    $0x1,%eax
    244b:	0f 84 9f 00 00 00    	je     24f0 <_Z12handle_inputP8GameDataPKh+0x160>
        } else if (game->state == GAME_PAUSED) {
    2451:	83 f8 02             	cmp    $0x2,%eax
    2454:	74 da                	je     2430 <_Z12handle_inputP8GameDataPKh+0xa0>
    2456:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    245d:	00 00 00 
    if (keystate[SDL_SCANCODE_R] && game->state == GAME_OVER) {
    2460:	80 7d 15 00          	cmpb   $0x0,0x15(%rbp)
    2464:	74 d1                	je     2437 <_Z12handle_inputP8GameDataPKh+0xa7>
    2466:	83 3b 03             	cmpl   $0x3,(%rbx)
    2469:	75 cc                	jne    2437 <_Z12handle_inputP8GameDataPKh+0xa7>
    pthread_mutex_init(&game->mutex, NULL);
    246b:	4c 89 e7             	mov    %r12,%rdi
    246e:	31 f6                	xor    %esi,%esi
    2470:	e8 9b ef ff ff       	call   1410 <pthread_mutex_init@plt>
    game->player1.x = 50;
    2475:	48 8b 05 1c 11 00 00 	mov    0x111c(%rip),%rax        # 3598 <_IO_stdin_used+0x598>
    pthread_mutex_unlock(&game->mutex);
    247c:	4c 89 e7             	mov    %r12,%rdi
    game->state = GAME_MENU;
    247f:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
    game->running = 1;
    2485:	c7 43 68 01 00 00 00 	movl   $0x1,0x68(%rbx)
    game->ball.x = WINDOW_WIDTH / 2;
    248c:	0f 28 05 dd 10 00 00 	movaps 0x10dd(%rip),%xmm0        # 3570 <_IO_stdin_used+0x570>
    game->player1.x = 50;
    2493:	48 89 43 14          	mov    %rax,0x14(%rbx)
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    2497:	48 8b 05 02 11 00 00 	mov    0x1102(%rip),%rax        # 35a0 <_IO_stdin_used+0x5a0>
    game->player1.score = 0;
    249e:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    24a5:	48 89 43 20          	mov    %rax,0x20(%rbx)
    game->player2.score = 0;
    24a9:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
    game->ball.x = WINDOW_WIDTH / 2;
    24b0:	0f 11 43 04          	movups %xmm0,0x4(%rbx)
}
    24b4:	5b                   	pop    %rbx
    24b5:	5d                   	pop    %rbp
    24b6:	41 5c                	pop    %r12
    pthread_mutex_unlock(&game->mutex);
    24b8:	e9 93 ee ff ff       	jmp    1350 <pthread_mutex_unlock@plt>
    24bd:	0f 1f 00             	nopl   (%rax)
        game->player2.y += PADDLE_SPEED;
    24c0:	f3 0f 58 05 4c 0b 00 	addss  0xb4c(%rip),%xmm0        # 3014 <_IO_stdin_used+0x14>
    24c7:	00 
    24c8:	f3 0f 11 43 24       	movss  %xmm0,0x24(%rbx)
    24cd:	e9 52 ff ff ff       	jmp    2424 <_Z12handle_inputP8GameDataPKh+0x94>
    24d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        game->player1.y += PADDLE_SPEED;
    24d8:	f3 0f 58 05 34 0b 00 	addss  0xb34(%rip),%xmm0        # 3014 <_IO_stdin_used+0x14>
    24df:	00 
    24e0:	f3 0f 11 43 18       	movss  %xmm0,0x18(%rbx)
    24e5:	e9 fd fe ff ff       	jmp    23e7 <_Z12handle_inputP8GameDataPKh+0x57>
    24ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    24f0:	b8 02 00 00 00       	mov    $0x2,%eax
            game->state = GAME_PAUSED;
    24f5:	89 03                	mov    %eax,(%rbx)
    if (keystate[SDL_SCANCODE_R] && game->state == GAME_OVER) {
    24f7:	e9 3b ff ff ff       	jmp    2437 <_Z12handle_inputP8GameDataPKh+0xa7>
    24fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002500 <_Z11render_gameP12SDL_RendererP8GameData>:
void render_game(SDL_Renderer* renderer, GameData* game) {
    2500:	f3 0f 1e fa          	endbr64
    2504:	41 56                	push   %r14
    pthread_mutex_lock(&game->mutex);
    2506:	4c 8d 76 40          	lea    0x40(%rsi),%r14
void render_game(SDL_Renderer* renderer, GameData* game) {
    250a:	41 55                	push   %r13
    250c:	41 54                	push   %r12
        SDL_Rect line_rect = {WINDOW_WIDTH/2 - 2, y, 4, 10};
    250e:	49 bc 04 00 00 00 0a 	movabs $0xa00000004,%r12
    2515:	00 00 00 
void render_game(SDL_Renderer* renderer, GameData* game) {
    2518:	55                   	push   %rbp
    2519:	48 89 fd             	mov    %rdi,%rbp
    pthread_mutex_lock(&game->mutex);
    251c:	4c 89 f7             	mov    %r14,%rdi
void render_game(SDL_Renderer* renderer, GameData* game) {
    251f:	53                   	push   %rbx
    2520:	48 89 f3             	mov    %rsi,%rbx
    2523:	48 83 ec 50          	sub    $0x50,%rsp
    2527:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    252e:	00 00 
    2530:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    2535:	31 c0                	xor    %eax,%eax
    pthread_mutex_lock(&game->mutex);
    2537:	4c 8d 6c 24 30       	lea    0x30(%rsp),%r13
    253c:	e8 bf ee ff ff       	call   1400 <pthread_mutex_lock@plt>
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    2541:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
    2547:	31 c9                	xor    %ecx,%ecx
    2549:	31 d2                	xor    %edx,%edx
    254b:	31 f6                	xor    %esi,%esi
    254d:	48 89 ef             	mov    %rbp,%rdi
    2550:	e8 8b ee ff ff       	call   13e0 <SDL_SetRenderDrawColor@plt>
    SDL_RenderClear(renderer);
    2555:	48 89 ef             	mov    %rbp,%rdi
    2558:	e8 23 ee ff ff       	call   1380 <SDL_RenderClear@plt>
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    255d:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
    2563:	b9 ff 00 00 00       	mov    $0xff,%ecx
    2568:	48 89 ef             	mov    %rbp,%rdi
    256b:	ba ff 00 00 00       	mov    $0xff,%edx
    2570:	be ff 00 00 00       	mov    $0xff,%esi
    2575:	e8 66 ee ff ff       	call   13e0 <SDL_SetRenderDrawColor@plt>
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    257a:	f3 0f 7e 43 14       	movq   0x14(%rbx),%xmm0
    SDL_RenderFillRect(renderer, &p1_rect);
    257f:	48 89 e6             	mov    %rsp,%rsi
    2582:	48 89 ef             	mov    %rbp,%rdi
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    2585:	48 8b 05 24 10 00 00 	mov    0x1024(%rip),%rax        # 35b0 <_IO_stdin_used+0x5b0>
    258c:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    2590:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
    SDL_Rect p2_rect = {(int)game->player2.x, (int)game->player2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    2595:	f3 0f 7e 43 20       	movq   0x20(%rbx),%xmm0
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    259a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    SDL_Rect p2_rect = {(int)game->player2.x, (int)game->player2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    259f:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    25a3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    25a8:	66 0f d6 44 24 10    	movq   %xmm0,0x10(%rsp)
    SDL_RenderFillRect(renderer, &p1_rect);
    25ae:	e8 3d ed ff ff       	call   12f0 <SDL_RenderFillRect@plt>
    SDL_RenderFillRect(renderer, &p2_rect);
    25b3:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    25b8:	48 89 ef             	mov    %rbp,%rdi
    25bb:	e8 30 ed ff ff       	call   12f0 <SDL_RenderFillRect@plt>
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    25c0:	f3 0f 7e 43 04       	movq   0x4(%rbx),%xmm0
    SDL_RenderFillRect(renderer, &ball_rect);
    25c5:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    25ca:	48 89 ef             	mov    %rbp,%rdi
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    25cd:	48 8b 05 d4 0f 00 00 	mov    0xfd4(%rip),%rax        # 35a8 <_IO_stdin_used+0x5a8>
    for (int y = 0; y < WINDOW_HEIGHT; y += 20) {
    25d4:	31 db                	xor    %ebx,%ebx
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    25d6:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    25da:	66 0f d6 44 24 20    	movq   %xmm0,0x20(%rsp)
    25e0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    SDL_RenderFillRect(renderer, &ball_rect);
    25e5:	e8 06 ed ff ff       	call   12f0 <SDL_RenderFillRect@plt>
    for (int y = 0; y < WINDOW_HEIGHT; y += 20) {
    25ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        SDL_Rect line_rect = {WINDOW_WIDTH/2 - 2, y, 4, 10};
    25f0:	89 5c 24 34          	mov    %ebx,0x34(%rsp)
        SDL_RenderFillRect(renderer, &line_rect);
    25f4:	4c 89 ee             	mov    %r13,%rsi
    25f7:	48 89 ef             	mov    %rbp,%rdi
    for (int y = 0; y < WINDOW_HEIGHT; y += 20) {
    25fa:	83 c3 14             	add    $0x14,%ebx
        SDL_Rect line_rect = {WINDOW_WIDTH/2 - 2, y, 4, 10};
    25fd:	c7 44 24 30 8e 01 00 	movl   $0x18e,0x30(%rsp)
    2604:	00 
    2605:	4c 89 64 24 38       	mov    %r12,0x38(%rsp)
        SDL_RenderFillRect(renderer, &line_rect);
    260a:	e8 e1 ec ff ff       	call   12f0 <SDL_RenderFillRect@plt>
    for (int y = 0; y < WINDOW_HEIGHT; y += 20) {
    260f:	81 fb 58 02 00 00    	cmp    $0x258,%ebx
    2615:	75 d9                	jne    25f0 <_Z11render_gameP12SDL_RendererP8GameData+0xf0>
    pthread_mutex_unlock(&game->mutex);
    2617:	4c 89 f7             	mov    %r14,%rdi
    261a:	e8 31 ed ff ff       	call   1350 <pthread_mutex_unlock@plt>
    SDL_RenderPresent(renderer);
    261f:	48 89 ef             	mov    %rbp,%rdi
    2622:	e8 89 ec ff ff       	call   12b0 <SDL_RenderPresent@plt>
}
    2627:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    262c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    2633:	00 00 
    2635:	75 0d                	jne    2644 <_Z11render_gameP12SDL_RendererP8GameData+0x144>
    2637:	48 83 c4 50          	add    $0x50,%rsp
    263b:	5b                   	pop    %rbx
    263c:	5d                   	pop    %rbp
    263d:	41 5c                	pop    %r12
    263f:	41 5d                	pop    %r13
    2641:	41 5e                	pop    %r14
    2643:	c3                   	ret
    2644:	e8 57 ed ff ff       	call   13a0 <__stack_chk_fail@plt>

Desmontagem da seção .fini:

000000000000264c <_fini>:
    264c:	f3 0f 1e fa          	endbr64
    2650:	48 83 ec 08          	sub    $0x8,%rsp
    2654:	48 83 c4 08          	add    $0x8,%rsp
    2658:	c3                   	ret
