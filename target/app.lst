
target/release/app: formato do arquivo elf64-x86-64

Seções:
Idx Name          Tam.      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000318  0000000000000318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000030  0000000000000338  0000000000000338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000368  0000000000000368  00000368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000000038c  000000000000038c  0000038c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000028  00000000000003b0  00000000000003b0  000003b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       000003a8  00000000000003d8  00000000000003d8  000003d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000272  0000000000000780  0000000000000780  00000780  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  0000004e  00000000000009f2  00000000000009f2  000009f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000050  0000000000000a40  0000000000000a40  00000a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     000000c0  0000000000000a90  0000000000000a90  00000a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000300  0000000000000b50  0000000000000b50  00000b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000001000  0000000000001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          00000210  0000000000001020  0000000000001020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .plt.got      00000010  0000000000001230  0000000000001230  00001230  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .plt.sec      00000200  0000000000001240  0000000000001240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text         00001139  0000000000001440  0000000000001440  00001440  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .fini         0000000d  000000000000257c  000000000000257c  0000257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       000003d8  0000000000003000  0000000000003000  00003000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .eh_frame_hdr 00000094  00000000000033d8  00000000000033d8  000033d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .eh_frame     000002ec  0000000000003470  0000000000003470  00003470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .init_array   00000008  0000000000004cb0  0000000000004cb0  00003cb0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .fini_array   00000008  0000000000004cb8  0000000000004cb8  00003cb8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      00000200  0000000000004cc0  0000000000004cc0  00003cc0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          00000140  0000000000004ec0  0000000000004ec0  00003ec0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         00000010  0000000000005000  0000000000005000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000090  0000000000005020  0000000000005020  00004010  2**5
                  ALLOC
 26 .comment      0000002b  0000000000000000  0000000000000000  00004010  2**0
                  CONTENTS, READONLY
 27 .debug_aranges 00000070  0000000000000000  0000000000000000  0000403b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   0000815a  0000000000000000  0000000000000000  000040ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 0000092d  0000000000000000  0000000000000000  0000c205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   00000fb2  0000000000000000  0000000000000000  0000cb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    00003f57  0000000000000000  0000000000000000  0000dae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line_str 00000367  0000000000000000  0000000000000000  00011a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_loclists 0000068c  0000000000000000  0000000000000000  00011da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_rnglists 0000013e  0000000000000000  0000000000000000  0001242e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Desmontagem da seção .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 e1 3f 00 00 	mov    0x3fe1(%rip),%rax        # 4ff0 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret

Desmontagem da seção .plt:

0000000000001020 <.plt>:
    1020:	ff 35 a2 3e 00 00    	push   0x3ea2(%rip)        # 4ec8 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 a4 3e 00 00    	jmp    *0x3ea4(%rip)        # 4ed0 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)
    1030:	f3 0f 1e fa          	endbr64
    1034:	68 00 00 00 00       	push   $0x0
    1039:	e9 e2 ff ff ff       	jmp    1020 <_init+0x20>
    103e:	66 90                	xchg   %ax,%ax
    1040:	f3 0f 1e fa          	endbr64
    1044:	68 01 00 00 00       	push   $0x1
    1049:	e9 d2 ff ff ff       	jmp    1020 <_init+0x20>
    104e:	66 90                	xchg   %ax,%ax
    1050:	f3 0f 1e fa          	endbr64
    1054:	68 02 00 00 00       	push   $0x2
    1059:	e9 c2 ff ff ff       	jmp    1020 <_init+0x20>
    105e:	66 90                	xchg   %ax,%ax
    1060:	f3 0f 1e fa          	endbr64
    1064:	68 03 00 00 00       	push   $0x3
    1069:	e9 b2 ff ff ff       	jmp    1020 <_init+0x20>
    106e:	66 90                	xchg   %ax,%ax
    1070:	f3 0f 1e fa          	endbr64
    1074:	68 04 00 00 00       	push   $0x4
    1079:	e9 a2 ff ff ff       	jmp    1020 <_init+0x20>
    107e:	66 90                	xchg   %ax,%ax
    1080:	f3 0f 1e fa          	endbr64
    1084:	68 05 00 00 00       	push   $0x5
    1089:	e9 92 ff ff ff       	jmp    1020 <_init+0x20>
    108e:	66 90                	xchg   %ax,%ax
    1090:	f3 0f 1e fa          	endbr64
    1094:	68 06 00 00 00       	push   $0x6
    1099:	e9 82 ff ff ff       	jmp    1020 <_init+0x20>
    109e:	66 90                	xchg   %ax,%ax
    10a0:	f3 0f 1e fa          	endbr64
    10a4:	68 07 00 00 00       	push   $0x7
    10a9:	e9 72 ff ff ff       	jmp    1020 <_init+0x20>
    10ae:	66 90                	xchg   %ax,%ax
    10b0:	f3 0f 1e fa          	endbr64
    10b4:	68 08 00 00 00       	push   $0x8
    10b9:	e9 62 ff ff ff       	jmp    1020 <_init+0x20>
    10be:	66 90                	xchg   %ax,%ax
    10c0:	f3 0f 1e fa          	endbr64
    10c4:	68 09 00 00 00       	push   $0x9
    10c9:	e9 52 ff ff ff       	jmp    1020 <_init+0x20>
    10ce:	66 90                	xchg   %ax,%ax
    10d0:	f3 0f 1e fa          	endbr64
    10d4:	68 0a 00 00 00       	push   $0xa
    10d9:	e9 42 ff ff ff       	jmp    1020 <_init+0x20>
    10de:	66 90                	xchg   %ax,%ax
    10e0:	f3 0f 1e fa          	endbr64
    10e4:	68 0b 00 00 00       	push   $0xb
    10e9:	e9 32 ff ff ff       	jmp    1020 <_init+0x20>
    10ee:	66 90                	xchg   %ax,%ax
    10f0:	f3 0f 1e fa          	endbr64
    10f4:	68 0c 00 00 00       	push   $0xc
    10f9:	e9 22 ff ff ff       	jmp    1020 <_init+0x20>
    10fe:	66 90                	xchg   %ax,%ax
    1100:	f3 0f 1e fa          	endbr64
    1104:	68 0d 00 00 00       	push   $0xd
    1109:	e9 12 ff ff ff       	jmp    1020 <_init+0x20>
    110e:	66 90                	xchg   %ax,%ax
    1110:	f3 0f 1e fa          	endbr64
    1114:	68 0e 00 00 00       	push   $0xe
    1119:	e9 02 ff ff ff       	jmp    1020 <_init+0x20>
    111e:	66 90                	xchg   %ax,%ax
    1120:	f3 0f 1e fa          	endbr64
    1124:	68 0f 00 00 00       	push   $0xf
    1129:	e9 f2 fe ff ff       	jmp    1020 <_init+0x20>
    112e:	66 90                	xchg   %ax,%ax
    1130:	f3 0f 1e fa          	endbr64
    1134:	68 10 00 00 00       	push   $0x10
    1139:	e9 e2 fe ff ff       	jmp    1020 <_init+0x20>
    113e:	66 90                	xchg   %ax,%ax
    1140:	f3 0f 1e fa          	endbr64
    1144:	68 11 00 00 00       	push   $0x11
    1149:	e9 d2 fe ff ff       	jmp    1020 <_init+0x20>
    114e:	66 90                	xchg   %ax,%ax
    1150:	f3 0f 1e fa          	endbr64
    1154:	68 12 00 00 00       	push   $0x12
    1159:	e9 c2 fe ff ff       	jmp    1020 <_init+0x20>
    115e:	66 90                	xchg   %ax,%ax
    1160:	f3 0f 1e fa          	endbr64
    1164:	68 13 00 00 00       	push   $0x13
    1169:	e9 b2 fe ff ff       	jmp    1020 <_init+0x20>
    116e:	66 90                	xchg   %ax,%ax
    1170:	f3 0f 1e fa          	endbr64
    1174:	68 14 00 00 00       	push   $0x14
    1179:	e9 a2 fe ff ff       	jmp    1020 <_init+0x20>
    117e:	66 90                	xchg   %ax,%ax
    1180:	f3 0f 1e fa          	endbr64
    1184:	68 15 00 00 00       	push   $0x15
    1189:	e9 92 fe ff ff       	jmp    1020 <_init+0x20>
    118e:	66 90                	xchg   %ax,%ax
    1190:	f3 0f 1e fa          	endbr64
    1194:	68 16 00 00 00       	push   $0x16
    1199:	e9 82 fe ff ff       	jmp    1020 <_init+0x20>
    119e:	66 90                	xchg   %ax,%ax
    11a0:	f3 0f 1e fa          	endbr64
    11a4:	68 17 00 00 00       	push   $0x17
    11a9:	e9 72 fe ff ff       	jmp    1020 <_init+0x20>
    11ae:	66 90                	xchg   %ax,%ax
    11b0:	f3 0f 1e fa          	endbr64
    11b4:	68 18 00 00 00       	push   $0x18
    11b9:	e9 62 fe ff ff       	jmp    1020 <_init+0x20>
    11be:	66 90                	xchg   %ax,%ax
    11c0:	f3 0f 1e fa          	endbr64
    11c4:	68 19 00 00 00       	push   $0x19
    11c9:	e9 52 fe ff ff       	jmp    1020 <_init+0x20>
    11ce:	66 90                	xchg   %ax,%ax
    11d0:	f3 0f 1e fa          	endbr64
    11d4:	68 1a 00 00 00       	push   $0x1a
    11d9:	e9 42 fe ff ff       	jmp    1020 <_init+0x20>
    11de:	66 90                	xchg   %ax,%ax
    11e0:	f3 0f 1e fa          	endbr64
    11e4:	68 1b 00 00 00       	push   $0x1b
    11e9:	e9 32 fe ff ff       	jmp    1020 <_init+0x20>
    11ee:	66 90                	xchg   %ax,%ax
    11f0:	f3 0f 1e fa          	endbr64
    11f4:	68 1c 00 00 00       	push   $0x1c
    11f9:	e9 22 fe ff ff       	jmp    1020 <_init+0x20>
    11fe:	66 90                	xchg   %ax,%ax
    1200:	f3 0f 1e fa          	endbr64
    1204:	68 1d 00 00 00       	push   $0x1d
    1209:	e9 12 fe ff ff       	jmp    1020 <_init+0x20>
    120e:	66 90                	xchg   %ax,%ax
    1210:	f3 0f 1e fa          	endbr64
    1214:	68 1e 00 00 00       	push   $0x1e
    1219:	e9 02 fe ff ff       	jmp    1020 <_init+0x20>
    121e:	66 90                	xchg   %ax,%ax
    1220:	f3 0f 1e fa          	endbr64
    1224:	68 1f 00 00 00       	push   $0x1f
    1229:	e9 f2 fd ff ff       	jmp    1020 <_init+0x20>
    122e:	66 90                	xchg   %ax,%ax

Desmontagem da seção .plt.got:

0000000000001230 <__cxa_finalize@plt>:
    1230:	f3 0f 1e fa          	endbr64
    1234:	ff 25 9e 3d 00 00    	jmp    *0x3d9e(%rip)        # 4fd8 <__cxa_finalize@GLIBC_2.2.5>
    123a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

Desmontagem da seção .plt.sec:

0000000000001240 <__printf_chk@plt>:
    1240:	f3 0f 1e fa          	endbr64
    1244:	ff 25 8e 3c 00 00    	jmp    *0x3c8e(%rip)        # 4ed8 <__printf_chk@GLIBC_2.3.4>
    124a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001250 <SDL_DestroyWindow@plt>:
    1250:	f3 0f 1e fa          	endbr64
    1254:	ff 25 86 3c 00 00    	jmp    *0x3c86(%rip)        # 4ee0 <SDL_DestroyWindow@Base>
    125a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001260 <SDL_CreateRenderer@plt>:
    1260:	f3 0f 1e fa          	endbr64
    1264:	ff 25 7e 3c 00 00    	jmp    *0x3c7e(%rip)        # 4ee8 <SDL_CreateRenderer@Base>
    126a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001270 <__errno_location@plt>:
    1270:	f3 0f 1e fa          	endbr64
    1274:	ff 25 76 3c 00 00    	jmp    *0x3c76(%rip)        # 4ef0 <__errno_location@GLIBC_2.2.5>
    127a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001280 <SDL_CreateWindow@plt>:
    1280:	f3 0f 1e fa          	endbr64
    1284:	ff 25 6e 3c 00 00    	jmp    *0x3c6e(%rip)        # 4ef8 <SDL_CreateWindow@Base>
    128a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001290 <SDL_Quit@plt>:
    1290:	f3 0f 1e fa          	endbr64
    1294:	ff 25 66 3c 00 00    	jmp    *0x3c66(%rip)        # 4f00 <SDL_Quit@Base>
    129a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012a0 <SDL_RenderPresent@plt>:
    12a0:	f3 0f 1e fa          	endbr64
    12a4:	ff 25 5e 3c 00 00    	jmp    *0x3c5e(%rip)        # 4f08 <SDL_RenderPresent@Base>
    12aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012b0 <strerror@plt>:
    12b0:	f3 0f 1e fa          	endbr64
    12b4:	ff 25 56 3c 00 00    	jmp    *0x3c56(%rip)        # 4f10 <strerror@GLIBC_2.2.5>
    12ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012c0 <write@plt>:
    12c0:	f3 0f 1e fa          	endbr64
    12c4:	ff 25 4e 3c 00 00    	jmp    *0x3c4e(%rip)        # 4f18 <write@GLIBC_2.2.5>
    12ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012d0 <SDL_DestroyRenderer@plt>:
    12d0:	f3 0f 1e fa          	endbr64
    12d4:	ff 25 46 3c 00 00    	jmp    *0x3c46(%rip)        # 4f20 <SDL_DestroyRenderer@Base>
    12da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012e0 <SDL_RenderFillRect@plt>:
    12e0:	f3 0f 1e fa          	endbr64
    12e4:	ff 25 3e 3c 00 00    	jmp    *0x3c3e(%rip)        # 4f28 <SDL_RenderFillRect@Base>
    12ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000012f0 <SDL_PollEvent@plt>:
    12f0:	f3 0f 1e fa          	endbr64
    12f4:	ff 25 36 3c 00 00    	jmp    *0x3c36(%rip)        # 4f30 <SDL_PollEvent@Base>
    12fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001300 <SDL_Delay@plt>:
    1300:	f3 0f 1e fa          	endbr64
    1304:	ff 25 2e 3c 00 00    	jmp    *0x3c2e(%rip)        # 4f38 <SDL_Delay@Base>
    130a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001310 <open@plt>:
    1310:	f3 0f 1e fa          	endbr64
    1314:	ff 25 26 3c 00 00    	jmp    *0x3c26(%rip)        # 4f40 <open@GLIBC_2.2.5>
    131a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001320 <SDL_GetError@plt>:
    1320:	f3 0f 1e fa          	endbr64
    1324:	ff 25 1e 3c 00 00    	jmp    *0x3c1e(%rip)        # 4f48 <SDL_GetError@Base>
    132a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001330 <pthread_mutex_unlock@plt>:
    1330:	f3 0f 1e fa          	endbr64
    1334:	ff 25 16 3c 00 00    	jmp    *0x3c16(%rip)        # 4f50 <pthread_mutex_unlock@GLIBC_2.2.5>
    133a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001340 <pthread_join@plt>:
    1340:	f3 0f 1e fa          	endbr64
    1344:	ff 25 0e 3c 00 00    	jmp    *0x3c0e(%rip)        # 4f58 <pthread_join@GLIBC_2.34>
    134a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001350 <SDL_Init@plt>:
    1350:	f3 0f 1e fa          	endbr64
    1354:	ff 25 06 3c 00 00    	jmp    *0x3c06(%rip)        # 4f60 <SDL_Init@Base>
    135a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001360 <SDL_RenderClear@plt>:
    1360:	f3 0f 1e fa          	endbr64
    1364:	ff 25 fe 3b 00 00    	jmp    *0x3bfe(%rip)        # 4f68 <SDL_RenderClear@Base>
    136a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001370 <SDL_HasIntersection@plt>:
    1370:	f3 0f 1e fa          	endbr64
    1374:	ff 25 f6 3b 00 00    	jmp    *0x3bf6(%rip)        # 4f70 <SDL_HasIntersection@Base>
    137a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001380 <__stack_chk_fail@plt>:
    1380:	f3 0f 1e fa          	endbr64
    1384:	ff 25 ee 3b 00 00    	jmp    *0x3bee(%rip)        # 4f78 <__stack_chk_fail@GLIBC_2.4>
    138a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001390 <pthread_mutex_destroy@plt>:
    1390:	f3 0f 1e fa          	endbr64
    1394:	ff 25 e6 3b 00 00    	jmp    *0x3be6(%rip)        # 4f80 <pthread_mutex_destroy@GLIBC_2.2.5>
    139a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013a0 <ioctl@plt>:
    13a0:	f3 0f 1e fa          	endbr64
    13a4:	ff 25 de 3b 00 00    	jmp    *0x3bde(%rip)        # 4f88 <ioctl@GLIBC_2.2.5>
    13aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013b0 <usleep@plt>:
    13b0:	f3 0f 1e fa          	endbr64
    13b4:	ff 25 d6 3b 00 00    	jmp    *0x3bd6(%rip)        # 4f90 <usleep@GLIBC_2.2.5>
    13ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013c0 <SDL_SetRenderDrawColor@plt>:
    13c0:	f3 0f 1e fa          	endbr64
    13c4:	ff 25 ce 3b 00 00    	jmp    *0x3bce(%rip)        # 4f98 <SDL_SetRenderDrawColor@Base>
    13ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013d0 <read@plt>:
    13d0:	f3 0f 1e fa          	endbr64
    13d4:	ff 25 c6 3b 00 00    	jmp    *0x3bc6(%rip)        # 4fa0 <read@GLIBC_2.2.5>
    13da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013e0 <pthread_mutex_lock@plt>:
    13e0:	f3 0f 1e fa          	endbr64
    13e4:	ff 25 be 3b 00 00    	jmp    *0x3bbe(%rip)        # 4fa8 <pthread_mutex_lock@GLIBC_2.2.5>
    13ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000013f0 <pthread_mutex_init@plt>:
    13f0:	f3 0f 1e fa          	endbr64
    13f4:	ff 25 b6 3b 00 00    	jmp    *0x3bb6(%rip)        # 4fb0 <pthread_mutex_init@GLIBC_2.2.5>
    13fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001400 <puts@plt>:
    1400:	f3 0f 1e fa          	endbr64
    1404:	ff 25 ae 3b 00 00    	jmp    *0x3bae(%rip)        # 4fb8 <puts@GLIBC_2.2.5>
    140a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001410 <pthread_create@plt>:
    1410:	f3 0f 1e fa          	endbr64
    1414:	ff 25 a6 3b 00 00    	jmp    *0x3ba6(%rip)        # 4fc0 <pthread_create@GLIBC_2.34>
    141a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001420 <close@plt>:
    1420:	f3 0f 1e fa          	endbr64
    1424:	ff 25 9e 3b 00 00    	jmp    *0x3b9e(%rip)        # 4fc8 <close@GLIBC_2.2.5>
    142a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001430 <SDL_GetKeyboardState@plt>:
    1430:	f3 0f 1e fa          	endbr64
    1434:	ff 25 96 3b 00 00    	jmp    *0x3b96(%rip)        # 4fd0 <SDL_GetKeyboardState@Base>
    143a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

Desmontagem da seção .text:

0000000000001440 <main>:
    pthread_mutex_unlock(&game->mutex);
    
    SDL_RenderPresent(renderer);
}

int main(int argc, char** argv) {
    1440:	f3 0f 1e fa          	endbr64
    1444:	41 55                	push   %r13
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    1446:	48 8d 3d 04 1d 00 00 	lea    0x1d04(%rip),%rdi        # 3151 <_IO_stdin_used+0x151>
    pthread_mutex_init(&game->mutex, NULL);
    144d:	4c 8d 2d 2c 3c 00 00 	lea    0x3c2c(%rip),%r13        # 5080 <game_data+0x40>
int main(int argc, char** argv) {
    1454:	41 54                	push   %r12
    1456:	55                   	push   %rbp
    game->state = GAME_MENU;
    1457:	49 8d 6d c0          	lea    -0x40(%r13),%rbp
int main(int argc, char** argv) {
    145b:	53                   	push   %rbx
    145c:	48 83 ec 68          	sub    $0x68,%rsp
    1460:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1467:	00 00 
    1469:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    146e:	31 c0                	xor    %eax,%eax
    SDL_Window* window = NULL;
    1470:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
    1477:	00 00 
    SDL_Renderer* renderer = NULL;
    1479:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    1480:	00 00 
    1482:	e8 79 ff ff ff       	call   1400 <puts@plt>
    pthread_mutex_init(&game->mutex, NULL);
    1487:	31 f6                	xor    %esi,%esi
    1489:	4c 89 ef             	mov    %r13,%rdi
    148c:	e8 5f ff ff ff       	call   13f0 <pthread_mutex_init@plt>
    game->player1.x = 50;
    1491:	48 8b 05 20 1f 00 00 	mov    0x1f20(%rip),%rax        # 33b8 <_IO_stdin_used+0x3b8>
    game->ball.x = WINDOW_WIDTH / 2;
    1498:	0f 28 05 f1 1e 00 00 	movaps 0x1ef1(%rip),%xmm0        # 3390 <_IO_stdin_used+0x390>
    
    // Initialize game
    init_game(&game_data);
    
    // Initialize hardware
    if (init_hardware(&game_data) < 0) {
    149f:	48 89 ef             	mov    %rbp,%rdi
    game->state = GAME_MENU;
    14a2:	c7 05 94 3b 00 00 00 	movl   $0x0,0x3b94(%rip)        # 5040 <game_data>
    14a9:	00 00 00 
    game->player1.x = 50;
    14ac:	48 89 05 a1 3b 00 00 	mov    %rax,0x3ba1(%rip)        # 5054 <game_data+0x14>
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    14b3:	48 8b 05 06 1f 00 00 	mov    0x1f06(%rip),%rax        # 33c0 <_IO_stdin_used+0x3c0>
    game->running = 1;
    14ba:	c7 05 e4 3b 00 00 01 	movl   $0x1,0x3be4(%rip)        # 50a8 <game_data+0x68>
    14c1:	00 00 00 
    game->player1.score = 0;
    14c4:	c7 05 8e 3b 00 00 00 	movl   $0x0,0x3b8e(%rip)        # 505c <game_data+0x1c>
    14cb:	00 00 00 
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    14ce:	48 89 05 8b 3b 00 00 	mov    %rax,0x3b8b(%rip)        # 5060 <game_data+0x20>
    game->player2.score = 0;
    14d5:	c7 05 89 3b 00 00 00 	movl   $0x0,0x3b89(%rip)        # 5068 <game_data+0x28>
    14dc:	00 00 00 
    game->ball.x = WINDOW_WIDTH / 2;
    14df:	0f 11 05 5e 3b 00 00 	movups %xmm0,0x3b5e(%rip)        # 5044 <game_data+0x4>
    if (init_hardware(&game_data) < 0) {
    14e6:	e8 35 02 00 00       	call   1720 <_Z13init_hardwareP8GameData>
    14eb:	85 c0                	test   %eax,%eax
    14ed:	0f 88 1c 01 00 00    	js     160f <main+0x1cf>
        printf("Warning: Hardware initialization failed, continuing without FPGA features\n");
    }
    
    // Initialize graphics
    if (init_graphics(&window, &renderer) < 0) {
    14f3:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    14f8:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    14fd:	e8 ce 0a 00 00       	call   1fd0 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer>
    1502:	85 c0                	test   %eax,%eax
    1504:	0f 88 16 01 00 00    	js     1620 <main+0x1e0>
        return -1;
    }
    
    // Start hardware thread
    pthread_create(&hardware_thread_id, NULL, hardware_thread, &game_data);
    150a:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
    150f:	48 89 e9             	mov    %rbp,%rcx
    1512:	48 8d 5c 24 20       	lea    0x20(%rsp),%rbx
    1517:	31 f6                	xor    %esi,%esi
    1519:	48 8d 15 90 08 00 00 	lea    0x890(%rip),%rdx        # 1db0 <_Z15hardware_threadPv>
    1520:	e8 eb fe ff ff       	call   1410 <pthread_create@plt>
    1525:	48 8d 3d f4 1d 00 00 	lea    0x1df4(%rip),%rdi        # 3320 <_IO_stdin_used+0x320>
    152c:	e8 cf fe ff ff       	call   1400 <puts@plt>
    
    printf("Game initialized. Press SPACE to start, W/S and UP/DOWN to control paddles\n");
    
    // Main game loop
    while (game_data.running) {
    1531:	8b 15 71 3b 00 00    	mov    0x3b71(%rip),%edx        # 50a8 <game_data+0x68>
    
    // Cleanup
    pthread_join(hardware_thread_id, NULL);
    cleanup_hardware(&game_data);
    
    SDL_DestroyRenderer(renderer);
    1537:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
    while (game_data.running) {
    153c:	85 d2                	test   %edx,%edx
    153e:	75 16                	jne    1556 <main+0x116>
    1540:	eb 59                	jmp    159b <main+0x15b>
    1542:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            if (event.type == SDL_QUIT) {
    1548:	81 7c 24 20 00 01 00 	cmpl   $0x100,0x20(%rsp)
    154f:	00 
    1550:	0f 84 aa 00 00 00    	je     1600 <main+0x1c0>
        while (SDL_PollEvent(&event)) {
    1556:	48 89 df             	mov    %rbx,%rdi
    1559:	e8 92 fd ff ff       	call   12f0 <SDL_PollEvent@plt>
    155e:	85 c0                	test   %eax,%eax
    1560:	75 e6                	jne    1548 <main+0x108>
        const Uint8* keystate = SDL_GetKeyboardState(NULL);
    1562:	31 ff                	xor    %edi,%edi
    1564:	e8 c7 fe ff ff       	call   1430 <SDL_GetKeyboardState@plt>
        handle_input(&game_data, keystate);
    1569:	48 89 ef             	mov    %rbp,%rdi
        const Uint8* keystate = SDL_GetKeyboardState(NULL);
    156c:	48 89 c6             	mov    %rax,%rsi
        handle_input(&game_data, keystate);
    156f:	e8 4c 0d 00 00       	call   22c0 <_Z12handle_inputP8GameDataPKh>
        update_game(&game_data);
    1574:	48 89 ef             	mov    %rbp,%rdi
    1577:	e8 84 0b 00 00       	call   2100 <_Z11update_gameP8GameData>
        render_game(renderer, &game_data);
    157c:	48 89 ee             	mov    %rbp,%rsi
    157f:	4c 89 e7             	mov    %r12,%rdi
    1582:	e8 a9 0e 00 00       	call   2430 <_Z11render_gameP12SDL_RendererP8GameData>
        SDL_Delay(16); // ~60 FPS
    1587:	bf 10 00 00 00       	mov    $0x10,%edi
    158c:	e8 6f fd ff ff       	call   1300 <SDL_Delay@plt>
    while (game_data.running) {
    1591:	8b 05 11 3b 00 00    	mov    0x3b11(%rip),%eax        # 50a8 <game_data+0x68>
    1597:	85 c0                	test   %eax,%eax
    1599:	75 bb                	jne    1556 <main+0x116>
    pthread_join(hardware_thread_id, NULL);
    159b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    15a0:	31 f6                	xor    %esi,%esi
    15a2:	e8 99 fd ff ff       	call   1340 <pthread_join@plt>
    cleanup_hardware(&game_data);
    15a7:	48 89 ef             	mov    %rbp,%rdi
    15aa:	e8 71 03 00 00       	call   1920 <_Z16cleanup_hardwareP8GameData>
    SDL_DestroyRenderer(renderer);
    15af:	4c 89 e7             	mov    %r12,%rdi
    15b2:	e8 19 fd ff ff       	call   12d0 <SDL_DestroyRenderer@plt>
    SDL_DestroyWindow(window);
    15b7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    15bc:	e8 8f fc ff ff       	call   1250 <SDL_DestroyWindow@plt>
    SDL_Quit();
    15c1:	e8 ca fc ff ff       	call   1290 <SDL_Quit@plt>
    
    pthread_mutex_destroy(&game_data.mutex);
    15c6:	4c 89 ef             	mov    %r13,%rdi
    15c9:	e8 c2 fd ff ff       	call   1390 <pthread_mutex_destroy@plt>
    15ce:	48 8d 3d 97 1b 00 00 	lea    0x1b97(%rip),%rdi        # 316c <_IO_stdin_used+0x16c>
    15d5:	e8 26 fe ff ff       	call   1400 <puts@plt>
    
    printf("Game finished.\n");
    return 0;
    15da:	31 c0                	xor    %eax,%eax
}
    15dc:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
    15e1:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    15e8:	00 00 
    15ea:	75 39                	jne    1625 <main+0x1e5>
    15ec:	48 83 c4 68          	add    $0x68,%rsp
    15f0:	5b                   	pop    %rbx
    15f1:	5d                   	pop    %rbp
    15f2:	41 5c                	pop    %r12
    15f4:	41 5d                	pop    %r13
    15f6:	c3                   	ret
    15f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    15fe:	00 00 
                game_data.running = 0;
    1600:	c7 05 9e 3a 00 00 00 	movl   $0x0,0x3a9e(%rip)        # 50a8 <game_data+0x68>
    1607:	00 00 00 
    160a:	e9 47 ff ff ff       	jmp    1556 <main+0x116>
    160f:	48 8d 3d ba 1c 00 00 	lea    0x1cba(%rip),%rdi        # 32d0 <_IO_stdin_used+0x2d0>
    1616:	e8 e5 fd ff ff       	call   1400 <puts@plt>
    161b:	e9 d3 fe ff ff       	jmp    14f3 <main+0xb3>
        return -1;
    1620:	83 c8 ff             	or     $0xffffffff,%eax
    1623:	eb b7                	jmp    15dc <main+0x19c>
}
    1625:	e8 56 fd ff ff       	call   1380 <__stack_chk_fail@plt>
    162a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001630 <_start>:
    1630:	f3 0f 1e fa          	endbr64
    1634:	31 ed                	xor    %ebp,%ebp
    1636:	49 89 d1             	mov    %rdx,%r9
    1639:	5e                   	pop    %rsi
    163a:	48 89 e2             	mov    %rsp,%rdx
    163d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1641:	50                   	push   %rax
    1642:	54                   	push   %rsp
    1643:	45 31 c0             	xor    %r8d,%r8d
    1646:	31 c9                	xor    %ecx,%ecx
    1648:	48 8d 3d f1 fd ff ff 	lea    -0x20f(%rip),%rdi        # 1440 <main>
    164f:	ff 15 8b 39 00 00    	call   *0x398b(%rip)        # 4fe0 <__libc_start_main@GLIBC_2.34>
    1655:	f4                   	hlt
    1656:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    165d:	00 00 00 

0000000000001660 <deregister_tm_clones>:
    1660:	48 8d 3d a9 39 00 00 	lea    0x39a9(%rip),%rdi        # 5010 <__TMC_END__>
    1667:	48 8d 05 a2 39 00 00 	lea    0x39a2(%rip),%rax        # 5010 <__TMC_END__>
    166e:	48 39 f8             	cmp    %rdi,%rax
    1671:	74 15                	je     1688 <deregister_tm_clones+0x28>
    1673:	48 8b 05 6e 39 00 00 	mov    0x396e(%rip),%rax        # 4fe8 <_ITM_deregisterTMCloneTable@Base>
    167a:	48 85 c0             	test   %rax,%rax
    167d:	74 09                	je     1688 <deregister_tm_clones+0x28>
    167f:	ff e0                	jmp    *%rax
    1681:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1688:	c3                   	ret
    1689:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001690 <register_tm_clones>:
    1690:	48 8d 3d 79 39 00 00 	lea    0x3979(%rip),%rdi        # 5010 <__TMC_END__>
    1697:	48 8d 35 72 39 00 00 	lea    0x3972(%rip),%rsi        # 5010 <__TMC_END__>
    169e:	48 29 fe             	sub    %rdi,%rsi
    16a1:	48 89 f0             	mov    %rsi,%rax
    16a4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    16a8:	48 c1 f8 03          	sar    $0x3,%rax
    16ac:	48 01 c6             	add    %rax,%rsi
    16af:	48 d1 fe             	sar    $1,%rsi
    16b2:	74 14                	je     16c8 <register_tm_clones+0x38>
    16b4:	48 8b 05 3d 39 00 00 	mov    0x393d(%rip),%rax        # 4ff8 <_ITM_registerTMCloneTable@Base>
    16bb:	48 85 c0             	test   %rax,%rax
    16be:	74 08                	je     16c8 <register_tm_clones+0x38>
    16c0:	ff e0                	jmp    *%rax
    16c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    16c8:	c3                   	ret
    16c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000016d0 <__do_global_dtors_aux>:
    16d0:	f3 0f 1e fa          	endbr64
    16d4:	80 3d 45 39 00 00 00 	cmpb   $0x0,0x3945(%rip)        # 5020 <completed.0>
    16db:	75 2b                	jne    1708 <__do_global_dtors_aux+0x38>
    16dd:	55                   	push   %rbp
    16de:	48 83 3d f2 38 00 00 	cmpq   $0x0,0x38f2(%rip)        # 4fd8 <__cxa_finalize@GLIBC_2.2.5>
    16e5:	00 
    16e6:	48 89 e5             	mov    %rsp,%rbp
    16e9:	74 0c                	je     16f7 <__do_global_dtors_aux+0x27>
    16eb:	48 8b 3d 16 39 00 00 	mov    0x3916(%rip),%rdi        # 5008 <__dso_handle>
    16f2:	e8 39 fb ff ff       	call   1230 <__cxa_finalize@plt>
    16f7:	e8 64 ff ff ff       	call   1660 <deregister_tm_clones>
    16fc:	c6 05 1d 39 00 00 01 	movb   $0x1,0x391d(%rip)        # 5020 <completed.0>
    1703:	5d                   	pop    %rbp
    1704:	c3                   	ret
    1705:	0f 1f 00             	nopl   (%rax)
    1708:	c3                   	ret
    1709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001710 <frame_dummy>:
    1710:	f3 0f 1e fa          	endbr64
    1714:	e9 77 ff ff ff       	jmp    1690 <register_tm_clones>
    1719:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001720 <_Z13init_hardwareP8GameData>:
#include "ioctl_cmds.h"
#include "display.h"
#include "pong.h"

// Initialize hardware connection
int init_hardware(GameData* game) {
    1720:	f3 0f 1e fa          	endbr64
    1724:	53                   	push   %rbx
    1725:	48 89 fb             	mov    %rdi,%rbx
    1728:	48 8d 3d ed 18 00 00 	lea    0x18ed(%rip),%rdi        # 301c <_IO_stdin_used+0x1c>
    172f:	48 83 ec 10          	sub    $0x10,%rsp
    1733:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    173a:	00 00 
    173c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1741:	31 c0                	xor    %eax,%eax
    1743:	e8 b8 fc ff ff       	call   1400 <puts@plt>
      if (__OPEN_NEEDS_MODE (__oflag) && __va_arg_pack_len () < 1)
	{
	  __open_missing_mode ();
	  return __open_2 (__path, __oflag);
	}
      return __open_alias (__path, __oflag, __va_arg_pack ());
    1748:	be 02 00 00 00       	mov    $0x2,%esi
    174d:	48 8d 3d e6 18 00 00 	lea    0x18e6(%rip),%rdi        # 303a <_IO_stdin_used+0x3a>
    1754:	31 c0                	xor    %eax,%eax
    1756:	e8 b5 fb ff ff       	call   1310 <open@plt>
    printf("Initializing FPGA hardware...\n");
    
    // Try to open the PCI device file
    game->fpga_fd = open("/dev/de2i-150", O_RDWR);
    175b:	89 43 38             	mov    %eax,0x38(%rbx)
    if (game->fpga_fd < 0) {
    175e:	85 c0                	test   %eax,%eax
    1760:	0f 88 73 01 00 00    	js     18d9 <_Z13init_hardwareP8GameData+0x1b9>
    1766:	89 c2                	mov    %eax,%edx
    1768:	48 8d 35 69 1a 00 00 	lea    0x1a69(%rip),%rsi        # 31d8 <_IO_stdin_used+0x1d8>
    176f:	bf 02 00 00 00       	mov    $0x2,%edi
    1774:	31 c0                	xor    %eax,%eax
    1776:	e8 c5 fa ff ff       	call   1240 <__printf_chk@plt>
    
    // Test initial communication - clear all LEDs and displays
    uint32_t zero = 0;
    
    // Clear red LEDs
    if (ioctl(game->fpga_fd, WR_RED_LEDS) < 0) {
    177b:	8b 7b 38             	mov    0x38(%rbx),%edi
    177e:	31 c0                	xor    %eax,%eax
    1780:	be 65 61 00 00       	mov    $0x6165,%esi
    uint32_t zero = 0;
    1785:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
    if (ioctl(game->fpga_fd, WR_RED_LEDS) < 0) {
    178c:	e8 0f fc ff ff       	call   13a0 <ioctl@plt>
    1791:	85 c0                	test   %eax,%eax
    1793:	0f 88 e7 00 00 00    	js     1880 <_Z13init_hardwareP8GameData+0x160>
        printf("Warning: Could not access red LEDs\n");
    } else {
        write(game->fpga_fd, &zero, sizeof(zero));
    1799:	8b 7b 38             	mov    0x38(%rbx),%edi
    179c:	48 89 e6             	mov    %rsp,%rsi
    179f:	ba 04 00 00 00       	mov    $0x4,%edx
    17a4:	e8 17 fb ff ff       	call   12c0 <write@plt>
    17a9:	48 8d 3d 98 18 00 00 	lea    0x1898(%rip),%rdi        # 3048 <_IO_stdin_used+0x48>
    17b0:	e8 4b fc ff ff       	call   1400 <puts@plt>
        printf("Red LEDs cleared\n");
    }
    
    // Clear green LEDs  
    if (ioctl(game->fpga_fd, WR_GREEN_LEDS) < 0) {
    17b5:	8b 7b 38             	mov    0x38(%rbx),%edi
    17b8:	31 c0                	xor    %eax,%eax
    17ba:	be 66 61 00 00       	mov    $0x6166,%esi
    17bf:	e8 dc fb ff ff       	call   13a0 <ioctl@plt>
    17c4:	85 c0                	test   %eax,%eax
    17c6:	0f 88 fc 00 00 00    	js     18c8 <_Z13init_hardwareP8GameData+0x1a8>
        printf("Warning: Could not access green LEDs\n");
    } else {
        write(game->fpga_fd, &zero, sizeof(zero));
    17cc:	8b 7b 38             	mov    0x38(%rbx),%edi
    17cf:	48 89 e6             	mov    %rsp,%rsi
    17d2:	ba 04 00 00 00       	mov    $0x4,%edx
    17d7:	e8 e4 fa ff ff       	call   12c0 <write@plt>
    17dc:	48 8d 3d 76 18 00 00 	lea    0x1876(%rip),%rdi        # 3059 <_IO_stdin_used+0x59>
    17e3:	e8 18 fc ff ff       	call   1400 <puts@plt>
    }
    
    // Clear displays
    uint32_t display_off = 0xFFFFFFFF; // All segments off
    
    if (ioctl(game->fpga_fd, WR_L_DISPLAY) < 0) {
    17e8:	8b 7b 38             	mov    0x38(%rbx),%edi
    17eb:	31 c0                	xor    %eax,%eax
    17ed:	be 63 61 00 00       	mov    $0x6163,%esi
    uint32_t display_off = 0xFFFFFFFF; // All segments off
    17f2:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
    17f9:	ff 
    if (ioctl(game->fpga_fd, WR_L_DISPLAY) < 0) {
    17fa:	e8 a1 fb ff ff       	call   13a0 <ioctl@plt>
    17ff:	85 c0                	test   %eax,%eax
    1801:	0f 88 a9 00 00 00    	js     18b0 <_Z13init_hardwareP8GameData+0x190>
        printf("Warning: Could not access left display\n");
    } else {
        write(game->fpga_fd, &display_off, sizeof(display_off));
    1807:	8b 7b 38             	mov    0x38(%rbx),%edi
    180a:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    180f:	ba 04 00 00 00       	mov    $0x4,%edx
    1814:	e8 a7 fa ff ff       	call   12c0 <write@plt>
    1819:	48 8d 3d 4c 18 00 00 	lea    0x184c(%rip),%rdi        # 306c <_IO_stdin_used+0x6c>
    1820:	e8 db fb ff ff       	call   1400 <puts@plt>
        printf("Left display cleared\n");
    }
    
    if (ioctl(game->fpga_fd, WR_R_DISPLAY) < 0) {
    1825:	8b 7b 38             	mov    0x38(%rbx),%edi
    1828:	31 c0                	xor    %eax,%eax
    182a:	be 64 61 00 00       	mov    $0x6164,%esi
    182f:	e8 6c fb ff ff       	call   13a0 <ioctl@plt>
    1834:	85 c0                	test   %eax,%eax
    1836:	78 60                	js     1898 <_Z13init_hardwareP8GameData+0x178>
        printf("Warning: Could not access right display\n");
    } else {
        write(game->fpga_fd, &display_off, sizeof(display_off));
    1838:	8b 7b 38             	mov    0x38(%rbx),%edi
    183b:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    1840:	ba 04 00 00 00       	mov    $0x4,%edx
    1845:	e8 76 fa ff ff       	call   12c0 <write@plt>
    184a:	48 8d 3d 30 18 00 00 	lea    0x1830(%rip),%rdi        # 3081 <_IO_stdin_used+0x81>
    1851:	e8 aa fb ff ff       	call   1400 <puts@plt>
    1856:	48 8d 3d 4b 1a 00 00 	lea    0x1a4b(%rip),%rdi        # 32a8 <_IO_stdin_used+0x2a8>
    185d:	e8 9e fb ff ff       	call   1400 <puts@plt>
        printf("Right display cleared\n");
    }
    
    printf("Hardware initialization complete\n");
    return 0;
    1862:	31 c0                	xor    %eax,%eax
}
    1864:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    1869:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1870:	00 00 
    1872:	0f 85 99 00 00 00    	jne    1911 <_Z13init_hardwareP8GameData+0x1f1>
    1878:	48 83 c4 10          	add    $0x10,%rsp
    187c:	5b                   	pop    %rbx
    187d:	c3                   	ret
    187e:	66 90                	xchg   %ax,%ax
    1880:	48 8d 3d 81 19 00 00 	lea    0x1981(%rip),%rdi        # 3208 <_IO_stdin_used+0x208>
    1887:	e8 74 fb ff ff       	call   1400 <puts@plt>
    188c:	e9 24 ff ff ff       	jmp    17b5 <_Z13init_hardwareP8GameData+0x95>
    1891:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1898:	48 8d 3d e1 19 00 00 	lea    0x19e1(%rip),%rdi        # 3280 <_IO_stdin_used+0x280>
    189f:	e8 5c fb ff ff       	call   1400 <puts@plt>
    18a4:	eb b0                	jmp    1856 <_Z13init_hardwareP8GameData+0x136>
    18a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    18ad:	00 00 00 
    18b0:	48 8d 3d a1 19 00 00 	lea    0x19a1(%rip),%rdi        # 3258 <_IO_stdin_used+0x258>
    18b7:	e8 44 fb ff ff       	call   1400 <puts@plt>
    18bc:	e9 64 ff ff ff       	jmp    1825 <_Z13init_hardwareP8GameData+0x105>
    18c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    18c8:	48 8d 3d 61 19 00 00 	lea    0x1961(%rip),%rdi        # 3230 <_IO_stdin_used+0x230>
    18cf:	e8 2c fb ff ff       	call   1400 <puts@plt>
    18d4:	e9 0f ff ff ff       	jmp    17e8 <_Z13init_hardwareP8GameData+0xc8>
        printf("Failed to open FPGA device: %s\n", strerror(errno));
    18d9:	e8 92 f9 ff ff       	call   1270 <__errno_location@plt>
    18de:	8b 38                	mov    (%rax),%edi
    18e0:	e8 cb f9 ff ff       	call   12b0 <strerror@plt>
    18e5:	48 8d 35 94 18 00 00 	lea    0x1894(%rip),%rsi        # 3180 <_IO_stdin_used+0x180>
    18ec:	bf 02 00 00 00       	mov    $0x2,%edi
    18f1:	48 89 c2             	mov    %rax,%rdx
    18f4:	31 c0                	xor    %eax,%eax
    18f6:	e8 45 f9 ff ff       	call   1240 <__printf_chk@plt>
    18fb:	48 8d 3d 9e 18 00 00 	lea    0x189e(%rip),%rdi        # 31a0 <_IO_stdin_used+0x1a0>
    1902:	e8 f9 fa ff ff       	call   1400 <puts@plt>
        return -1;
    1907:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    190c:	e9 53 ff ff ff       	jmp    1864 <_Z13init_hardwareP8GameData+0x144>
}
    1911:	e8 6a fa ff ff       	call   1380 <__stack_chk_fail@plt>
    1916:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    191d:	00 00 00 

0000000000001920 <_Z16cleanup_hardwareP8GameData>:

// Cleanup hardware resources
void cleanup_hardware(GameData* game) {
    1920:	f3 0f 1e fa          	endbr64
    1924:	55                   	push   %rbp
    1925:	53                   	push   %rbx
    1926:	48 83 ec 18          	sub    $0x18,%rsp
    192a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1931:	00 00 
    1933:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1938:	31 c0                	xor    %eax,%eax
    if (game->fpga_fd >= 0) {
    193a:	8b 47 38             	mov    0x38(%rdi),%eax
    193d:	85 c0                	test   %eax,%eax
    193f:	0f 88 b6 00 00 00    	js     19fb <_Z16cleanup_hardwareP8GameData+0xdb>
    1945:	48 89 fb             	mov    %rdi,%rbx
    1948:	48 8d 3d 48 17 00 00 	lea    0x1748(%rip),%rdi        # 3097 <_IO_stdin_used+0x97>
        // Turn off all LEDs and displays before closing
        uint32_t zero = 0;
        uint32_t display_off = 0xFFFFFFFF;
        
        ioctl(game->fpga_fd, WR_RED_LEDS);
        write(game->fpga_fd, &zero, sizeof(zero));
    194f:	48 89 e5             	mov    %rsp,%rbp
    1952:	e8 a9 fa ff ff       	call   1400 <puts@plt>
        ioctl(game->fpga_fd, WR_RED_LEDS);
    1957:	8b 7b 38             	mov    0x38(%rbx),%edi
    195a:	be 65 61 00 00       	mov    $0x6165,%esi
    195f:	31 c0                	xor    %eax,%eax
        uint32_t zero = 0;
    1961:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
        uint32_t display_off = 0xFFFFFFFF;
    1968:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
    196f:	ff 
        ioctl(game->fpga_fd, WR_RED_LEDS);
    1970:	e8 2b fa ff ff       	call   13a0 <ioctl@plt>
        write(game->fpga_fd, &zero, sizeof(zero));
    1975:	8b 7b 38             	mov    0x38(%rbx),%edi
    1978:	ba 04 00 00 00       	mov    $0x4,%edx
    197d:	48 89 ee             	mov    %rbp,%rsi
    1980:	e8 3b f9 ff ff       	call   12c0 <write@plt>
        
        ioctl(game->fpga_fd, WR_GREEN_LEDS);
    1985:	8b 7b 38             	mov    0x38(%rbx),%edi
    1988:	be 66 61 00 00       	mov    $0x6166,%esi
    198d:	31 c0                	xor    %eax,%eax
    198f:	e8 0c fa ff ff       	call   13a0 <ioctl@plt>
        write(game->fpga_fd, &zero, sizeof(zero));
    1994:	8b 7b 38             	mov    0x38(%rbx),%edi
    1997:	ba 04 00 00 00       	mov    $0x4,%edx
    199c:	48 89 ee             	mov    %rbp,%rsi
        
        ioctl(game->fpga_fd, WR_L_DISPLAY);
        write(game->fpga_fd, &display_off, sizeof(display_off));
    199f:	48 8d 6c 24 04       	lea    0x4(%rsp),%rbp
        write(game->fpga_fd, &zero, sizeof(zero));
    19a4:	e8 17 f9 ff ff       	call   12c0 <write@plt>
        ioctl(game->fpga_fd, WR_L_DISPLAY);
    19a9:	8b 7b 38             	mov    0x38(%rbx),%edi
    19ac:	be 63 61 00 00       	mov    $0x6163,%esi
    19b1:	31 c0                	xor    %eax,%eax
    19b3:	e8 e8 f9 ff ff       	call   13a0 <ioctl@plt>
        write(game->fpga_fd, &display_off, sizeof(display_off));
    19b8:	8b 7b 38             	mov    0x38(%rbx),%edi
    19bb:	ba 04 00 00 00       	mov    $0x4,%edx
    19c0:	48 89 ee             	mov    %rbp,%rsi
    19c3:	e8 f8 f8 ff ff       	call   12c0 <write@plt>
        
        ioctl(game->fpga_fd, WR_R_DISPLAY);
    19c8:	8b 7b 38             	mov    0x38(%rbx),%edi
    19cb:	be 64 61 00 00       	mov    $0x6164,%esi
    19d0:	31 c0                	xor    %eax,%eax
    19d2:	e8 c9 f9 ff ff       	call   13a0 <ioctl@plt>
        write(game->fpga_fd, &display_off, sizeof(display_off));
    19d7:	8b 7b 38             	mov    0x38(%rbx),%edi
    19da:	ba 04 00 00 00       	mov    $0x4,%edx
    19df:	48 89 ee             	mov    %rbp,%rsi
    19e2:	e8 d9 f8 ff ff       	call   12c0 <write@plt>
        
        close(game->fpga_fd);
    19e7:	8b 7b 38             	mov    0x38(%rbx),%edi
    19ea:	e8 31 fa ff ff       	call   1420 <close@plt>
    19ef:	48 8d 3d be 16 00 00 	lea    0x16be(%rip),%rdi        # 30b4 <_IO_stdin_used+0xb4>
    19f6:	e8 05 fa ff ff       	call   1400 <puts@plt>
        printf("FPGA device closed\n");
    }
}
    19fb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1a00:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1a07:	00 00 
    1a09:	75 07                	jne    1a12 <_Z16cleanup_hardwareP8GameData+0xf2>
    1a0b:	48 83 c4 18          	add    $0x18,%rsp
    1a0f:	5b                   	pop    %rbx
    1a10:	5d                   	pop    %rbp
    1a11:	c3                   	ret
    1a12:	e8 69 f9 ff ff       	call   1380 <__stack_chk_fail@plt>
    1a17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1a1e:	00 00 

0000000000001a20 <_Z11update_ledsP8GameData>:

// Update LEDs based on game state
void update_leds(GameData* game) {
    1a20:	f3 0f 1e fa          	endbr64
    1a24:	53                   	push   %rbx
    1a25:	48 89 fb             	mov    %rdi,%rbx
    1a28:	48 83 ec 10          	sub    $0x10,%rsp
    if (game->fpga_fd < 0) return;
    1a2c:	8b 7f 38             	mov    0x38(%rdi),%edi
void update_leds(GameData* game) {
    1a2f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1a36:	00 00 
    1a38:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1a3d:	31 c0                	xor    %eax,%eax
    if (game->fpga_fd < 0) return;
    1a3f:	85 ff                	test   %edi,%edi
    1a41:	0f 88 a8 00 00 00    	js     1aef <_Z11update_ledsP8GameData+0xcf>
    
    uint32_t red_pattern = 0;
    uint32_t green_pattern = 0;
    
    switch (game->state) {
    1a47:	8b 03                	mov    (%rbx),%eax
    uint32_t red_pattern = 0;
    1a49:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
    uint32_t green_pattern = 0;
    1a50:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    1a57:	00 
    switch (game->state) {
    1a58:	83 f8 02             	cmp    $0x2,%eax
    1a5b:	0f 84 bf 00 00 00    	je     1b20 <_Z11update_ledsP8GameData+0x100>
    1a61:	0f 87 a1 00 00 00    	ja     1b08 <_Z11update_ledsP8GameData+0xe8>
    1a67:	85 c0                	test   %eax,%eax
    1a69:	0f 84 c1 00 00 00    	je     1b30 <_Z11update_ledsP8GameData+0x110>
            
        case GAME_PLAYING:
            // Show ball position with LEDs
            // Red LEDs represent ball X position (left side)
            // Green LEDs represent ball Y position (relative)
            red_pattern = (uint32_t)(game->ball.x / WINDOW_WIDTH * 32) & 0xFFFFFFFF;
    1a6f:	f3 0f 10 0d 91 15 00 	movss  0x1591(%rip),%xmm1        # 3008 <_IO_stdin_used+0x8>
    1a76:	00 
    1a77:	f3 0f 10 43 04       	movss  0x4(%rbx),%xmm0
    1a7c:	f3 0f 5e 05 80 15 00 	divss  0x1580(%rip),%xmm0        # 3004 <_IO_stdin_used+0x4>
    1a83:	00 
    1a84:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
    1a88:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
            green_pattern = (uint32_t)(game->ball.y / WINDOW_HEIGHT * 32) & 0xFFFFFFFF;
    1a8d:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
    1a92:	f3 0f 5e 05 72 15 00 	divss  0x1572(%rip),%xmm0        # 300c <_IO_stdin_used+0xc>
    1a99:	00 
    1a9a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
            red_pattern = (uint32_t)(game->ball.x / WINDOW_WIDTH * 32) & 0xFFFFFFFF;
    1a9e:	89 04 24             	mov    %eax,(%rsp)
            green_pattern = (uint32_t)(game->ball.y / WINDOW_HEIGHT * 32) & 0xFFFFFFFF;
    1aa1:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
    1aa6:	89 44 24 04          	mov    %eax,0x4(%rsp)
            }
            break;
    }
    
    // Write to hardware - CRITICAL: Always call ioctl() before write()
    if (ioctl(game->fpga_fd, WR_RED_LEDS) >= 0) {
    1aaa:	31 c0                	xor    %eax,%eax
    1aac:	be 65 61 00 00       	mov    $0x6165,%esi
    1ab1:	e8 ea f8 ff ff       	call   13a0 <ioctl@plt>
    1ab6:	85 c0                	test   %eax,%eax
    1ab8:	78 10                	js     1aca <_Z11update_ledsP8GameData+0xaa>
        write(game->fpga_fd, &red_pattern, sizeof(red_pattern));
    1aba:	8b 7b 38             	mov    0x38(%rbx),%edi
    1abd:	48 89 e6             	mov    %rsp,%rsi
    1ac0:	ba 04 00 00 00       	mov    $0x4,%edx
    1ac5:	e8 f6 f7 ff ff       	call   12c0 <write@plt>
    }
    
    if (ioctl(game->fpga_fd, WR_GREEN_LEDS) >= 0) {
    1aca:	8b 7b 38             	mov    0x38(%rbx),%edi
    1acd:	31 c0                	xor    %eax,%eax
    1acf:	be 66 61 00 00       	mov    $0x6166,%esi
    1ad4:	e8 c7 f8 ff ff       	call   13a0 <ioctl@plt>
    1ad9:	85 c0                	test   %eax,%eax
    1adb:	78 12                	js     1aef <_Z11update_ledsP8GameData+0xcf>
        write(game->fpga_fd, &green_pattern, sizeof(green_pattern));
    1add:	8b 7b 38             	mov    0x38(%rbx),%edi
    1ae0:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    1ae5:	ba 04 00 00 00       	mov    $0x4,%edx
    1aea:	e8 d1 f7 ff ff       	call   12c0 <write@plt>
    }
}
    1aef:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1af4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1afb:	00 00 
    1afd:	75 3e                	jne    1b3d <_Z11update_ledsP8GameData+0x11d>
    1aff:	48 83 c4 10          	add    $0x10,%rsp
    1b03:	5b                   	pop    %rbx
    1b04:	c3                   	ret
    1b05:	0f 1f 00             	nopl   (%rax)
    switch (game->state) {
    1b08:	83 f8 03             	cmp    $0x3,%eax
    1b0b:	75 9d                	jne    1aaa <_Z11update_ledsP8GameData+0x8a>
            if (game->winner == 1) {
    1b0d:	83 7b 2c 01          	cmpl   $0x1,0x2c(%rbx)
    1b11:	75 0d                	jne    1b20 <_Z11update_ledsP8GameData+0x100>
                green_pattern = 0xFFFFFFFF; // Player 1 wins
    1b13:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
    1b1a:	ff 
    1b1b:	eb 8d                	jmp    1aaa <_Z11update_ledsP8GameData+0x8a>
    1b1d:	0f 1f 00             	nopl   (%rax)
                red_pattern = 0xFFFFFFFF;   // Player 2 wins
    1b20:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%rsp)
    1b27:	e9 7e ff ff ff       	jmp    1aaa <_Z11update_ledsP8GameData+0x8a>
    1b2c:	0f 1f 40 00          	nopl   0x0(%rax)
            green_pattern = 0x55555555; // Alternating LEDs
    1b30:	c7 44 24 04 55 55 55 	movl   $0x55555555,0x4(%rsp)
    1b37:	55 
            break;
    1b38:	e9 6d ff ff ff       	jmp    1aaa <_Z11update_ledsP8GameData+0x8a>
}
    1b3d:	e8 3e f8 ff ff       	call   1380 <__stack_chk_fail@plt>
    1b42:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    1b49:	00 00 00 00 
    1b4d:	0f 1f 00             	nopl   (%rax)

0000000000001b50 <_Z16score_to_displayi>:

// Convert score to 7-segment display pattern
uint32_t score_to_display(int score) {
    1b50:	f3 0f 1e fa          	endbr64
    1b54:	48 83 ec 38          	sub    $0x38,%rsp
    uint32_t patterns[] = {
    1b58:	66 0f 6f 05 10 18 00 	movdqa 0x1810(%rip),%xmm0        # 3370 <_IO_stdin_used+0x370>
    1b5f:	00 
uint32_t score_to_display(int score) {
    1b60:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1b67:	00 00 
    1b69:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    1b6e:	31 c0                	xor    %eax,%eax
    uint32_t patterns[] = {
    1b70:	48 8b 05 39 18 00 00 	mov    0x1839(%rip),%rax        # 33b0 <_IO_stdin_used+0x3b0>
    1b77:	0f 29 04 24          	movaps %xmm0,(%rsp)
    1b7b:	66 0f 6f 05 fd 17 00 	movdqa 0x17fd(%rip),%xmm0        # 3380 <_IO_stdin_used+0x380>
    1b82:	00 
    1b83:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    1b88:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
        HEX_0, HEX_1, HEX_2, HEX_3, HEX_4,
        HEX_5, HEX_6, HEX_7, HEX_8, HEX_9
    };
    
    if (score >= 0 && score <= 9) {
    1b8d:	83 ff 09             	cmp    $0x9,%edi
    1b90:	76 1c                	jbe    1bae <_Z16score_to_displayi+0x5e>
        return patterns[score];
    }
    
    // For scores > 9, show last digit
    return patterns[score % 10];
    1b92:	48 63 c7             	movslq %edi,%rax
    1b95:	89 fa                	mov    %edi,%edx
    1b97:	48 69 c0 67 66 66 66 	imul   $0x66666667,%rax,%rax
    1b9e:	c1 fa 1f             	sar    $0x1f,%edx
    1ba1:	48 c1 f8 22          	sar    $0x22,%rax
    1ba5:	29 d0                	sub    %edx,%eax
    1ba7:	8d 04 80             	lea    (%rax,%rax,4),%eax
    1baa:	01 c0                	add    %eax,%eax
    1bac:	29 c7                	sub    %eax,%edi
    1bae:	48 63 ff             	movslq %edi,%rdi
    1bb1:	8b 04 bc             	mov    (%rsp,%rdi,4),%eax
}
    1bb4:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
    1bb9:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1bc0:	00 00 
    1bc2:	75 05                	jne    1bc9 <_Z16score_to_displayi+0x79>
    1bc4:	48 83 c4 38          	add    $0x38,%rsp
    1bc8:	c3                   	ret
    1bc9:	e8 b2 f7 ff ff       	call   1380 <__stack_chk_fail@plt>
    1bce:	66 90                	xchg   %ax,%ax

0000000000001bd0 <_Z15update_displaysP8GameData>:

// Update 7-segment displays with scores
void update_displays(GameData* game) {
    1bd0:	f3 0f 1e fa          	endbr64
    1bd4:	53                   	push   %rbx
    1bd5:	48 89 fb             	mov    %rdi,%rbx
    1bd8:	48 83 ec 40          	sub    $0x40,%rsp
    if (game->fpga_fd < 0) return;
    1bdc:	8b 7f 38             	mov    0x38(%rdi),%edi
void update_displays(GameData* game) {
    1bdf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1be6:	00 00 
    1be8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    1bed:	31 c0                	xor    %eax,%eax
    if (game->fpga_fd < 0) return;
    1bef:	85 ff                	test   %edi,%edi
    1bf1:	0f 88 b6 00 00 00    	js     1cad <_Z15update_displaysP8GameData+0xdd>
    uint32_t patterns[] = {
    1bf7:	66 0f 6f 0d 71 17 00 	movdqa 0x1771(%rip),%xmm1        # 3370 <_IO_stdin_used+0x370>
    1bfe:	00 
    1bff:	66 0f 6f 05 79 17 00 	movdqa 0x1779(%rip),%xmm0        # 3380 <_IO_stdin_used+0x380>
    1c06:	00 
    1c07:	48 8b 0d a2 17 00 00 	mov    0x17a2(%rip),%rcx        # 33b0 <_IO_stdin_used+0x3b0>
    
    // Left display shows Player 1 score
    uint32_t left_pattern = score_to_display(game->player1.score);
    1c0e:	48 63 43 1c          	movslq 0x1c(%rbx),%rax
    uint32_t patterns[] = {
    1c12:	0f 29 4c 24 10       	movaps %xmm1,0x10(%rsp)
    1c17:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    1c1c:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
    if (score >= 0 && score <= 9) {
    1c21:	83 f8 09             	cmp    $0x9,%eax
    1c24:	76 1e                	jbe    1c44 <_Z15update_displaysP8GameData+0x74>
    return patterns[score % 10];
    1c26:	48 63 d0             	movslq %eax,%rdx
    1c29:	89 c6                	mov    %eax,%esi
    1c2b:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    1c32:	c1 fe 1f             	sar    $0x1f,%esi
    1c35:	48 c1 fa 22          	sar    $0x22,%rdx
    1c39:	29 f2                	sub    %esi,%edx
    1c3b:	8d 14 92             	lea    (%rdx,%rdx,4),%edx
    1c3e:	01 d2                	add    %edx,%edx
    1c40:	29 d0                	sub    %edx,%eax
    1c42:	48 98                	cltq
    1c44:	8b 44 84 10          	mov    0x10(%rsp,%rax,4),%eax
    uint32_t patterns[] = {
    1c48:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    1c4d:	0f 29 4c 24 10       	movaps %xmm1,0x10(%rsp)
    uint32_t left_pattern = score_to_display(game->player1.score);
    1c52:	89 44 24 08          	mov    %eax,0x8(%rsp)
    
    // Right display shows Player 2 score  
    uint32_t right_pattern = score_to_display(game->player2.score);
    1c56:	48 63 43 28          	movslq 0x28(%rbx),%rax
    uint32_t patterns[] = {
    1c5a:	0f 29 44 24 20       	movaps %xmm0,0x20(%rsp)
    if (score >= 0 && score <= 9) {
    1c5f:	83 f8 09             	cmp    $0x9,%eax
    1c62:	76 1e                	jbe    1c82 <_Z15update_displaysP8GameData+0xb2>
    return patterns[score % 10];
    1c64:	48 63 d0             	movslq %eax,%rdx
    1c67:	89 c1                	mov    %eax,%ecx
    1c69:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    1c70:	c1 f9 1f             	sar    $0x1f,%ecx
    1c73:	48 c1 fa 22          	sar    $0x22,%rdx
    1c77:	29 ca                	sub    %ecx,%edx
    1c79:	8d 14 92             	lea    (%rdx,%rdx,4),%edx
    1c7c:	01 d2                	add    %edx,%edx
    1c7e:	29 d0                	sub    %edx,%eax
    1c80:	48 98                	cltq
    1c82:	8b 44 84 10          	mov    0x10(%rsp,%rax,4),%eax
    
    // Write to hardware - CRITICAL: Always call ioctl() before write()
    if (ioctl(game->fpga_fd, WR_L_DISPLAY) >= 0) {
    1c86:	be 63 61 00 00       	mov    $0x6163,%esi
    uint32_t right_pattern = score_to_display(game->player2.score);
    1c8b:	89 44 24 0c          	mov    %eax,0xc(%rsp)
    if (ioctl(game->fpga_fd, WR_L_DISPLAY) >= 0) {
    1c8f:	31 c0                	xor    %eax,%eax
    1c91:	e8 0a f7 ff ff       	call   13a0 <ioctl@plt>
    1c96:	85 c0                	test   %eax,%eax
    1c98:	79 46                	jns    1ce0 <_Z15update_displaysP8GameData+0x110>
        write(game->fpga_fd, &left_pattern, sizeof(left_pattern));
    }
    
    if (ioctl(game->fpga_fd, WR_R_DISPLAY) >= 0) {
    1c9a:	8b 7b 38             	mov    0x38(%rbx),%edi
    1c9d:	31 c0                	xor    %eax,%eax
    1c9f:	be 64 61 00 00       	mov    $0x6164,%esi
    1ca4:	e8 f7 f6 ff ff       	call   13a0 <ioctl@plt>
    1ca9:	85 c0                	test   %eax,%eax
    1cab:	79 1b                	jns    1cc8 <_Z15update_displaysP8GameData+0xf8>
        write(game->fpga_fd, &right_pattern, sizeof(right_pattern));
    }
}
    1cad:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    1cb2:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1cb9:	00 00 
    1cbb:	75 37                	jne    1cf4 <_Z15update_displaysP8GameData+0x124>
    1cbd:	48 83 c4 40          	add    $0x40,%rsp
    1cc1:	5b                   	pop    %rbx
    1cc2:	c3                   	ret
    1cc3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        write(game->fpga_fd, &right_pattern, sizeof(right_pattern));
    1cc8:	8b 7b 38             	mov    0x38(%rbx),%edi
    1ccb:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    1cd0:	ba 04 00 00 00       	mov    $0x4,%edx
    1cd5:	e8 e6 f5 ff ff       	call   12c0 <write@plt>
    1cda:	eb d1                	jmp    1cad <_Z15update_displaysP8GameData+0xdd>
    1cdc:	0f 1f 40 00          	nopl   0x0(%rax)
        write(game->fpga_fd, &left_pattern, sizeof(left_pattern));
    1ce0:	8b 7b 38             	mov    0x38(%rbx),%edi
    1ce3:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    1ce8:	ba 04 00 00 00       	mov    $0x4,%edx
    1ced:	e8 ce f5 ff ff       	call   12c0 <write@plt>
    1cf2:	eb a6                	jmp    1c9a <_Z15update_displaysP8GameData+0xca>
}
    1cf4:	e8 87 f6 ff ff       	call   1380 <__stack_chk_fail@plt>
    1cf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001d00 <_Z20read_hardware_inputsP8GameData>:

// Read switches and buttons (for future features)
void read_hardware_inputs(GameData* game) {
    1d00:	f3 0f 1e fa          	endbr64
    1d04:	53                   	push   %rbx
    1d05:	48 89 fb             	mov    %rdi,%rbx
    1d08:	48 83 ec 10          	sub    $0x10,%rsp
    if (game->fpga_fd < 0) return;
    1d0c:	8b 7f 38             	mov    0x38(%rdi),%edi
void read_hardware_inputs(GameData* game) {
    1d0f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1d16:	00 00 
    1d18:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1d1d:	31 c0                	xor    %eax,%eax
    if (game->fpga_fd < 0) return;
    1d1f:	85 ff                	test   %edi,%edi
    1d21:	78 21                	js     1d44 <_Z20read_hardware_inputsP8GameData+0x44>
    
    uint32_t data;
    
    // Read switches
    if (ioctl(game->fpga_fd, RD_SWITCHES) >= 0) {
    1d23:	be 61 61 00 00       	mov    $0x6161,%esi
    1d28:	e8 73 f6 ff ff       	call   13a0 <ioctl@plt>
    1d2d:	85 c0                	test   %eax,%eax
    1d2f:	79 4f                	jns    1d80 <_Z20read_hardware_inputsP8GameData+0x80>
            game->switches = data;
        }
    }
    
    // Read push buttons
    if (ioctl(game->fpga_fd, RD_PBUTTONS) >= 0) {
    1d31:	8b 7b 38             	mov    0x38(%rbx),%edi
    1d34:	31 c0                	xor    %eax,%eax
    1d36:	be 62 61 00 00       	mov    $0x6162,%esi
    1d3b:	e8 60 f6 ff ff       	call   13a0 <ioctl@plt>
    1d40:	85 c0                	test   %eax,%eax
    1d42:	79 1c                	jns    1d60 <_Z20read_hardware_inputsP8GameData+0x60>
    // You can use switches/buttons for:
    // - Switch 0: Change ball speed
    // - Switch 1: Enable/disable AI for player 2
    // - Button 0: Pause game
    // - Button 1: Reset game
}
    1d44:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1d49:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1d50:	00 00 
    1d52:	75 4c                	jne    1da0 <_Z20read_hardware_inputsP8GameData+0xa0>
    1d54:	48 83 c4 10          	add    $0x10,%rsp
    1d58:	5b                   	pop    %rbx
    1d59:	c3                   	ret
    1d5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
# include <bits/unistd-decl.h>

__fortify_function __wur ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  return __glibc_fortify (read, __nbytes, sizeof (char),
    1d60:	8b 7b 38             	mov    0x38(%rbx),%edi
    1d63:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    1d68:	ba 04 00 00 00       	mov    $0x4,%edx
    1d6d:	e8 5e f6 ff ff       	call   13d0 <read@plt>
        if (read(game->fpga_fd, &data, sizeof(data)) > 0) {
    1d72:	48 85 c0             	test   %rax,%rax
    1d75:	7e cd                	jle    1d44 <_Z20read_hardware_inputsP8GameData+0x44>
            game->buttons = data;
    1d77:	8b 44 24 04          	mov    0x4(%rsp),%eax
    1d7b:	89 43 34             	mov    %eax,0x34(%rbx)
    1d7e:	eb c4                	jmp    1d44 <_Z20read_hardware_inputsP8GameData+0x44>
    1d80:	8b 7b 38             	mov    0x38(%rbx),%edi
    1d83:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    1d88:	ba 04 00 00 00       	mov    $0x4,%edx
    1d8d:	e8 3e f6 ff ff       	call   13d0 <read@plt>
        if (read(game->fpga_fd, &data, sizeof(data)) > 0) {
    1d92:	48 85 c0             	test   %rax,%rax
    1d95:	7e 9a                	jle    1d31 <_Z20read_hardware_inputsP8GameData+0x31>
            game->switches = data;
    1d97:	8b 44 24 04          	mov    0x4(%rsp),%eax
    1d9b:	89 43 30             	mov    %eax,0x30(%rbx)
    1d9e:	eb 91                	jmp    1d31 <_Z20read_hardware_inputsP8GameData+0x31>
}
    1da0:	e8 db f5 ff ff       	call   1380 <__stack_chk_fail@plt>
    1da5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    1dac:	00 00 00 00 

0000000000001db0 <_Z15hardware_threadPv>:

// Hardware monitoring thread
void* hardware_thread(void* arg) {
    1db0:	f3 0f 1e fa          	endbr64
    1db4:	41 54                	push   %r12
    1db6:	55                   	push   %rbp
    1db7:	53                   	push   %rbx
    1db8:	48 89 fb             	mov    %rdi,%rbx
    1dbb:	48 8d 3d 05 13 00 00 	lea    0x1305(%rip),%rdi        # 30c7 <_IO_stdin_used+0xc7>
    1dc2:	48 83 ec 10          	sub    $0x10,%rsp
    1dc6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1dcd:	00 00 
    1dcf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1dd4:	31 c0                	xor    %eax,%eax
    1dd6:	e8 25 f6 ff ff       	call   1400 <puts@plt>
    GameData* game = (GameData*)arg;
    
    printf("Hardware thread started\n");
    
    while (game->running) {
    1ddb:	8b 53 68             	mov    0x68(%rbx),%edx
    1dde:	85 d2                	test   %edx,%edx
    1de0:	0f 84 a2 01 00 00    	je     1f88 <_Z15hardware_threadPv+0x1d8>
    1de6:	48 8d 6b 40          	lea    0x40(%rbx),%rbp
        write(game->fpga_fd, &green_pattern, sizeof(green_pattern));
    1dea:	4c 8d 64 24 04       	lea    0x4(%rsp),%r12
    1def:	e9 f1 00 00 00       	jmp    1ee5 <_Z15hardware_threadPv+0x135>
    1df4:	0f 1f 40 00          	nopl   0x0(%rax)
    if (ioctl(game->fpga_fd, RD_PBUTTONS) >= 0) {
    1df8:	8b 7b 38             	mov    0x38(%rbx),%edi
    1dfb:	31 c0                	xor    %eax,%eax
    1dfd:	be 62 61 00 00       	mov    $0x6162,%esi
    1e02:	e8 99 f5 ff ff       	call   13a0 <ioctl@plt>
    1e07:	85 c0                	test   %eax,%eax
    1e09:	0f 89 41 01 00 00    	jns    1f50 <_Z15hardware_threadPv+0x1a0>
    if (game->fpga_fd < 0) return;
    1e0f:	8b 7b 38             	mov    0x38(%rbx),%edi
    1e12:	85 ff                	test   %edi,%edi
    1e14:	0f 88 a6 00 00 00    	js     1ec0 <_Z15hardware_threadPv+0x110>
    switch (game->state) {
    1e1a:	8b 03                	mov    (%rbx),%eax
    uint32_t red_pattern = 0;
    1e1c:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
    uint32_t green_pattern = 0;
    1e23:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    1e2a:	00 
    switch (game->state) {
    1e2b:	83 f8 02             	cmp    $0x2,%eax
    1e2e:	0f 84 0b 01 00 00    	je     1f3f <_Z15hardware_threadPv+0x18f>
    1e34:	0f 87 f6 00 00 00    	ja     1f30 <_Z15hardware_threadPv+0x180>
    1e3a:	85 c0                	test   %eax,%eax
    1e3c:	0f 84 36 01 00 00    	je     1f78 <_Z15hardware_threadPv+0x1c8>
            red_pattern = (uint32_t)(game->ball.x / WINDOW_WIDTH * 32) & 0xFFFFFFFF;
    1e42:	f3 0f 10 43 04       	movss  0x4(%rbx),%xmm0
    1e47:	f3 0f 5e 05 b5 11 00 	divss  0x11b5(%rip),%xmm0        # 3004 <_IO_stdin_used+0x4>
    1e4e:	00 
    1e4f:	f3 0f 59 05 b1 11 00 	mulss  0x11b1(%rip),%xmm0        # 3008 <_IO_stdin_used+0x8>
    1e56:	00 
    1e57:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
            green_pattern = (uint32_t)(game->ball.y / WINDOW_HEIGHT * 32) & 0xFFFFFFFF;
    1e5c:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
    1e61:	f3 0f 5e 05 a3 11 00 	divss  0x11a3(%rip),%xmm0        # 300c <_IO_stdin_used+0xc>
    1e68:	00 
    1e69:	f3 0f 59 05 97 11 00 	mulss  0x1197(%rip),%xmm0        # 3008 <_IO_stdin_used+0x8>
    1e70:	00 
            red_pattern = (uint32_t)(game->ball.x / WINDOW_WIDTH * 32) & 0xFFFFFFFF;
    1e71:	89 04 24             	mov    %eax,(%rsp)
            green_pattern = (uint32_t)(game->ball.y / WINDOW_HEIGHT * 32) & 0xFFFFFFFF;
    1e74:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
    1e79:	89 44 24 04          	mov    %eax,0x4(%rsp)
    if (ioctl(game->fpga_fd, WR_RED_LEDS) >= 0) {
    1e7d:	31 c0                	xor    %eax,%eax
    1e7f:	be 65 61 00 00       	mov    $0x6165,%esi
    1e84:	e8 17 f5 ff ff       	call   13a0 <ioctl@plt>
    1e89:	85 c0                	test   %eax,%eax
    1e8b:	78 10                	js     1e9d <_Z15hardware_threadPv+0xed>
        write(game->fpga_fd, &red_pattern, sizeof(red_pattern));
    1e8d:	8b 7b 38             	mov    0x38(%rbx),%edi
    1e90:	48 89 e6             	mov    %rsp,%rsi
    1e93:	ba 04 00 00 00       	mov    $0x4,%edx
    1e98:	e8 23 f4 ff ff       	call   12c0 <write@plt>
    if (ioctl(game->fpga_fd, WR_GREEN_LEDS) >= 0) {
    1e9d:	8b 7b 38             	mov    0x38(%rbx),%edi
    1ea0:	31 c0                	xor    %eax,%eax
    1ea2:	be 66 61 00 00       	mov    $0x6166,%esi
    1ea7:	e8 f4 f4 ff ff       	call   13a0 <ioctl@plt>
    1eac:	85 c0                	test   %eax,%eax
    1eae:	78 10                	js     1ec0 <_Z15hardware_threadPv+0x110>
        write(game->fpga_fd, &green_pattern, sizeof(green_pattern));
    1eb0:	8b 7b 38             	mov    0x38(%rbx),%edi
    1eb3:	ba 04 00 00 00       	mov    $0x4,%edx
    1eb8:	4c 89 e6             	mov    %r12,%rsi
    1ebb:	e8 00 f4 ff ff       	call   12c0 <write@plt>
        // Read inputs
        read_hardware_inputs(game);
        
        // Update outputs
        update_leds(game);
        update_displays(game);
    1ec0:	48 89 df             	mov    %rbx,%rdi
    1ec3:	e8 08 fd ff ff       	call   1bd0 <_Z15update_displaysP8GameData>
        
        pthread_mutex_unlock(&game->mutex);
    1ec8:	48 89 ef             	mov    %rbp,%rdi
    1ecb:	e8 60 f4 ff ff       	call   1330 <pthread_mutex_unlock@plt>
        
        // Update at 30Hz to avoid overwhelming the hardware
        usleep(33333); // ~30 FPS
    1ed0:	bf 35 82 00 00       	mov    $0x8235,%edi
    1ed5:	e8 d6 f4 ff ff       	call   13b0 <usleep@plt>
    while (game->running) {
    1eda:	8b 43 68             	mov    0x68(%rbx),%eax
    1edd:	85 c0                	test   %eax,%eax
    1edf:	0f 84 a3 00 00 00    	je     1f88 <_Z15hardware_threadPv+0x1d8>
        pthread_mutex_lock(&game->mutex);
    1ee5:	48 89 ef             	mov    %rbp,%rdi
    1ee8:	e8 f3 f4 ff ff       	call   13e0 <pthread_mutex_lock@plt>
    if (game->fpga_fd < 0) return;
    1eed:	8b 7b 38             	mov    0x38(%rbx),%edi
    1ef0:	85 ff                	test   %edi,%edi
    1ef2:	78 cc                	js     1ec0 <_Z15hardware_threadPv+0x110>
    if (ioctl(game->fpga_fd, RD_SWITCHES) >= 0) {
    1ef4:	31 c0                	xor    %eax,%eax
    1ef6:	be 61 61 00 00       	mov    $0x6161,%esi
    1efb:	e8 a0 f4 ff ff       	call   13a0 <ioctl@plt>
    1f00:	85 c0                	test   %eax,%eax
    1f02:	0f 88 f0 fe ff ff    	js     1df8 <_Z15hardware_threadPv+0x48>
    1f08:	8b 7b 38             	mov    0x38(%rbx),%edi
    1f0b:	ba 04 00 00 00       	mov    $0x4,%edx
    1f10:	4c 89 e6             	mov    %r12,%rsi
    1f13:	e8 b8 f4 ff ff       	call   13d0 <read@plt>
        if (read(game->fpga_fd, &data, sizeof(data)) > 0) {
    1f18:	48 85 c0             	test   %rax,%rax
    1f1b:	0f 8e d7 fe ff ff    	jle    1df8 <_Z15hardware_threadPv+0x48>
            game->switches = data;
    1f21:	8b 44 24 04          	mov    0x4(%rsp),%eax
    1f25:	89 43 30             	mov    %eax,0x30(%rbx)
    1f28:	e9 cb fe ff ff       	jmp    1df8 <_Z15hardware_threadPv+0x48>
    1f2d:	0f 1f 00             	nopl   (%rax)
    switch (game->state) {
    1f30:	83 f8 03             	cmp    $0x3,%eax
    1f33:	0f 85 44 ff ff ff    	jne    1e7d <_Z15hardware_threadPv+0xcd>
            if (game->winner == 1) {
    1f39:	83 7b 2c 01          	cmpl   $0x1,0x2c(%rbx)
    1f3d:	74 71                	je     1fb0 <_Z15hardware_threadPv+0x200>
                red_pattern = 0xFFFFFFFF;   // Player 2 wins
    1f3f:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%rsp)
    1f46:	e9 32 ff ff ff       	jmp    1e7d <_Z15hardware_threadPv+0xcd>
    1f4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    1f50:	8b 7b 38             	mov    0x38(%rbx),%edi
    1f53:	ba 04 00 00 00       	mov    $0x4,%edx
    1f58:	4c 89 e6             	mov    %r12,%rsi
    1f5b:	e8 70 f4 ff ff       	call   13d0 <read@plt>
        if (read(game->fpga_fd, &data, sizeof(data)) > 0) {
    1f60:	48 85 c0             	test   %rax,%rax
    1f63:	0f 8e a6 fe ff ff    	jle    1e0f <_Z15hardware_threadPv+0x5f>
            game->buttons = data;
    1f69:	8b 44 24 04          	mov    0x4(%rsp),%eax
    1f6d:	89 43 34             	mov    %eax,0x34(%rbx)
    1f70:	e9 9a fe ff ff       	jmp    1e0f <_Z15hardware_threadPv+0x5f>
    1f75:	0f 1f 00             	nopl   (%rax)
            green_pattern = 0x55555555; // Alternating LEDs
    1f78:	c7 44 24 04 55 55 55 	movl   $0x55555555,0x4(%rsp)
    1f7f:	55 
            break;
    1f80:	e9 f8 fe ff ff       	jmp    1e7d <_Z15hardware_threadPv+0xcd>
    1f85:	0f 1f 00             	nopl   (%rax)
    1f88:	48 8d 3d 50 11 00 00 	lea    0x1150(%rip),%rdi        # 30df <_IO_stdin_used+0xdf>
    1f8f:	e8 6c f4 ff ff       	call   1400 <puts@plt>
    }
    
    printf("Hardware thread finished\n");
    return NULL;
}
    1f94:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1f99:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1fa0:	00 00 
    1fa2:	75 19                	jne    1fbd <_Z15hardware_threadPv+0x20d>
    1fa4:	48 83 c4 10          	add    $0x10,%rsp
    1fa8:	31 c0                	xor    %eax,%eax
    1faa:	5b                   	pop    %rbx
    1fab:	5d                   	pop    %rbp
    1fac:	41 5c                	pop    %r12
    1fae:	c3                   	ret
    1faf:	90                   	nop
                green_pattern = 0xFFFFFFFF; // Player 1 wins
    1fb0:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
    1fb7:	ff 
    1fb8:	e9 c0 fe ff ff       	jmp    1e7d <_Z15hardware_threadPv+0xcd>
}
    1fbd:	e8 be f3 ff ff       	call   1380 <__stack_chk_fail@plt>
    1fc2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fc9:	00 00 00 
    1fcc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001fd0 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer>:
int init_graphics(SDL_Window** window, SDL_Renderer** renderer) {
    1fd0:	f3 0f 1e fa          	endbr64
    1fd4:	55                   	push   %rbp
    1fd5:	48 89 fd             	mov    %rdi,%rbp
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
    1fd8:	bf 20 00 00 00       	mov    $0x20,%edi
int init_graphics(SDL_Window** window, SDL_Renderer** renderer) {
    1fdd:	53                   	push   %rbx
    1fde:	48 89 f3             	mov    %rsi,%rbx
    1fe1:	48 83 ec 08          	sub    $0x8,%rsp
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
    1fe5:	e8 66 f3 ff ff       	call   1350 <SDL_Init@plt>
    1fea:	85 c0                	test   %eax,%eax
    1fec:	78 53                	js     2041 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x71>
    *window = SDL_CreateWindow("FPGA Pong", 
    1fee:	41 b9 04 00 00 00    	mov    $0x4,%r9d
    1ff4:	41 b8 58 02 00 00    	mov    $0x258,%r8d
    1ffa:	b9 20 03 00 00       	mov    $0x320,%ecx
    1fff:	ba 00 00 ff 2f       	mov    $0x2fff0000,%edx
    2004:	48 8d 3d 02 11 00 00 	lea    0x1102(%rip),%rdi        # 310d <_IO_stdin_used+0x10d>
    200b:	be 00 00 ff 2f       	mov    $0x2fff0000,%esi
    2010:	e8 6b f2 ff ff       	call   1280 <SDL_CreateWindow@plt>
    2015:	48 89 45 00          	mov    %rax,0x0(%rbp)
    2019:	48 89 c7             	mov    %rax,%rdi
    if (!*window) {
    201c:	48 85 c0             	test   %rax,%rax
    201f:	74 42                	je     2063 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x93>
    *renderer = SDL_CreateRenderer(*window, -1, SDL_RENDERER_ACCELERATED);
    2021:	ba 02 00 00 00       	mov    $0x2,%edx
    2026:	be ff ff ff ff       	mov    $0xffffffff,%esi
    202b:	e8 30 f2 ff ff       	call   1260 <SDL_CreateRenderer@plt>
    2030:	48 89 03             	mov    %rax,(%rbx)
    if (!*renderer) {
    2033:	48 85 c0             	test   %rax,%rax
    2036:	74 48                	je     2080 <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0xb0>
    return 0;
    2038:	31 c0                	xor    %eax,%eax
}
    203a:	48 83 c4 08          	add    $0x8,%rsp
    203e:	5b                   	pop    %rbx
    203f:	5d                   	pop    %rbp
    2040:	c3                   	ret
        printf("SDL init failed: %s\n", SDL_GetError());
    2041:	e8 da f2 ff ff       	call   1320 <SDL_GetError@plt>
    2046:	48 8d 35 ab 10 00 00 	lea    0x10ab(%rip),%rsi        # 30f8 <_IO_stdin_used+0xf8>
    204d:	bf 02 00 00 00       	mov    $0x2,%edi
    2052:	48 89 c2             	mov    %rax,%rdx
    2055:	31 c0                	xor    %eax,%eax
    2057:	e8 e4 f1 ff ff       	call   1240 <__printf_chk@plt>
        return -1;
    205c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    2061:	eb d7                	jmp    203a <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x6a>
        printf("Window creation failed: %s\n", SDL_GetError());
    2063:	e8 b8 f2 ff ff       	call   1320 <SDL_GetError@plt>
    2068:	48 8d 35 a8 10 00 00 	lea    0x10a8(%rip),%rsi        # 3117 <_IO_stdin_used+0x117>
    206f:	bf 02 00 00 00       	mov    $0x2,%edi
    2074:	48 89 c2             	mov    %rax,%rdx
    2077:	31 c0                	xor    %eax,%eax
    2079:	e8 c2 f1 ff ff       	call   1240 <__printf_chk@plt>
        return -1;
    207e:	eb dc                	jmp    205c <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x8c>
        printf("Renderer creation failed: %s\n", SDL_GetError());
    2080:	e8 9b f2 ff ff       	call   1320 <SDL_GetError@plt>
    2085:	48 8d 35 a7 10 00 00 	lea    0x10a7(%rip),%rsi        # 3133 <_IO_stdin_used+0x133>
    208c:	bf 02 00 00 00       	mov    $0x2,%edi
    2091:	48 89 c2             	mov    %rax,%rdx
    2094:	31 c0                	xor    %eax,%eax
    2096:	e8 a5 f1 ff ff       	call   1240 <__printf_chk@plt>
        return -1;
    209b:	eb bf                	jmp    205c <_Z13init_graphicsPP10SDL_WindowPP12SDL_Renderer+0x8c>
    209d:	0f 1f 00             	nopl   (%rax)

00000000000020a0 <_Z9init_gameP8GameData>:
void init_game(GameData* game) {
    20a0:	f3 0f 1e fa          	endbr64
    20a4:	53                   	push   %rbx
    pthread_mutex_init(&game->mutex, NULL);
    20a5:	31 f6                	xor    %esi,%esi
void init_game(GameData* game) {
    20a7:	48 89 fb             	mov    %rdi,%rbx
    pthread_mutex_init(&game->mutex, NULL);
    20aa:	48 8d 7f 40          	lea    0x40(%rdi),%rdi
    20ae:	e8 3d f3 ff ff       	call   13f0 <pthread_mutex_init@plt>
    game->player1.x = 50;
    20b3:	48 8b 05 fe 12 00 00 	mov    0x12fe(%rip),%rax        # 33b8 <_IO_stdin_used+0x3b8>
    game->ball.x = WINDOW_WIDTH / 2;
    20ba:	0f 28 05 cf 12 00 00 	movaps 0x12cf(%rip),%xmm0        # 3390 <_IO_stdin_used+0x390>
    game->state = GAME_MENU;
    20c1:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
    game->running = 1;
    20c7:	c7 43 68 01 00 00 00 	movl   $0x1,0x68(%rbx)
    game->player1.x = 50;
    20ce:	48 89 43 14          	mov    %rax,0x14(%rbx)
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    20d2:	48 8b 05 e7 12 00 00 	mov    0x12e7(%rip),%rax        # 33c0 <_IO_stdin_used+0x3c0>
    game->player1.score = 0;
    20d9:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    20e0:	48 89 43 20          	mov    %rax,0x20(%rbx)
    game->player2.score = 0;
    20e4:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
    game->ball.x = WINDOW_WIDTH / 2;
    20eb:	0f 11 43 04          	movups %xmm0,0x4(%rbx)
}
    20ef:	5b                   	pop    %rbx
    20f0:	c3                   	ret
    20f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    20f8:	00 00 00 00 
    20fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002100 <_Z11update_gameP8GameData>:
void update_game(GameData* game) {
    2100:	f3 0f 1e fa          	endbr64
    2104:	41 54                	push   %r12
    2106:	55                   	push   %rbp
    pthread_mutex_lock(&game->mutex);
    2107:	48 8d 6f 40          	lea    0x40(%rdi),%rbp
void update_game(GameData* game) {
    210b:	53                   	push   %rbx
    210c:	48 89 fb             	mov    %rdi,%rbx
    pthread_mutex_lock(&game->mutex);
    210f:	48 89 ef             	mov    %rbp,%rdi
void update_game(GameData* game) {
    2112:	48 83 ec 40          	sub    $0x40,%rsp
    2116:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    211d:	00 00 
    211f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    2124:	31 c0                	xor    %eax,%eax
    pthread_mutex_lock(&game->mutex);
    2126:	e8 b5 f2 ff ff       	call   13e0 <pthread_mutex_lock@plt>
    if (game->state != GAME_PLAYING) {
    212b:	83 3b 01             	cmpl   $0x1,(%rbx)
    212e:	0f 85 2c 01 00 00    	jne    2260 <_Z11update_gameP8GameData+0x160>
    game->ball.x += game->ball.vel_x;
    2134:	f3 0f 7e 43 04       	movq   0x4(%rbx),%xmm0
    2139:	f3 0f 7e 4b 0c       	movq   0xc(%rbx),%xmm1
    213e:	0f 58 c1             	addps  %xmm1,%xmm0
    2141:	0f 28 e0             	movaps %xmm0,%xmm4
    2144:	0f 13 43 04          	movlps %xmm0,0x4(%rbx)
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2148:	f3 0f 5b d8          	cvttps2dq %xmm0,%xmm3
    if (game->ball.y <= 0 || game->ball.y >= WINDOW_HEIGHT - BALL_SIZE) {
    214c:	66 0f ef c0          	pxor   %xmm0,%xmm0
    2150:	0f c6 e4 e5          	shufps $0xe5,%xmm4,%xmm4
    2154:	0f 2f c4             	comiss %xmm4,%xmm0
    2157:	73 09                	jae    2162 <_Z11update_gameP8GameData+0x62>
    2159:	0f 2f 25 b0 0e 00 00 	comiss 0xeb0(%rip),%xmm4        # 3010 <_IO_stdin_used+0x10>
    2160:	72 10                	jb     2172 <_Z11update_gameP8GameData+0x72>
        game->ball.vel_y = -game->ball.vel_y;
    2162:	0f c6 c9 e5          	shufps $0xe5,%xmm1,%xmm1
    2166:	0f 57 0d 33 12 00 00 	xorps  0x1233(%rip),%xmm1        # 33a0 <_IO_stdin_used+0x3a0>
    216d:	f3 0f 11 4b 10       	movss  %xmm1,0x10(%rbx)
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2172:	48 8b 05 4f 12 00 00 	mov    0x124f(%rip),%rax        # 33c8 <_IO_stdin_used+0x3c8>
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    2179:	f3 0f 7e 43 14       	movq   0x14(%rbx),%xmm0
    if (SDL_HasIntersection(&ball_rect, &p1_rect) || 
    217e:	49 89 e4             	mov    %rsp,%r12
    2181:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    2186:	4c 89 e7             	mov    %r12,%rdi
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2189:	66 0f d6 1c 24       	movq   %xmm3,(%rsp)
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    218e:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2192:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    2197:	48 8b 05 32 12 00 00 	mov    0x1232(%rip),%rax        # 33d0 <_IO_stdin_used+0x3d0>
    219e:	66 0f d6 44 24 10    	movq   %xmm0,0x10(%rsp)
    SDL_Rect p2_rect = {(int)game->player2.x, (int)game->player2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    21a4:	f3 0f 7e 43 20       	movq   0x20(%rbx),%xmm0
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    21a9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    SDL_Rect p2_rect = {(int)game->player2.x, (int)game->player2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    21ae:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    21b2:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    21b7:	66 0f d6 44 24 20    	movq   %xmm0,0x20(%rsp)
    if (SDL_HasIntersection(&ball_rect, &p1_rect) || 
    21bd:	e8 ae f1 ff ff       	call   1370 <SDL_HasIntersection@plt>
    21c2:	85 c0                	test   %eax,%eax
    21c4:	0f 84 d6 00 00 00    	je     22a0 <_Z11update_gameP8GameData+0x1a0>
        game->ball.vel_x = -game->ball.vel_x;
    21ca:	f3 0f 10 43 0c       	movss  0xc(%rbx),%xmm0
    21cf:	0f 57 05 ca 11 00 00 	xorps  0x11ca(%rip),%xmm0        # 33a0 <_IO_stdin_used+0x3a0>
    21d6:	f3 0f 11 43 0c       	movss  %xmm0,0xc(%rbx)
    if (game->ball.x < 0) {
    21db:	f3 0f 10 43 04       	movss  0x4(%rbx),%xmm0
    21e0:	66 0f ef c9          	pxor   %xmm1,%xmm1
        game->player1.score++;
    21e4:	8b 43 1c             	mov    0x1c(%rbx),%eax
    if (game->ball.x < 0) {
    21e7:	0f 2f c8             	comiss %xmm0,%xmm1
    21ea:	0f 87 90 00 00 00    	ja     2280 <_Z11update_gameP8GameData+0x180>
    if (game->ball.x > WINDOW_WIDTH) {
    21f0:	0f 2f 05 0d 0e 00 00 	comiss 0xe0d(%rip),%xmm0        # 3004 <_IO_stdin_used+0x4>
    21f7:	76 18                	jbe    2211 <_Z11update_gameP8GameData+0x111>
        game->ball.x = WINDOW_WIDTH / 2;
    21f9:	48 8b 15 90 11 00 00 	mov    0x1190(%rip),%rdx        # 3390 <_IO_stdin_used+0x390>
        game->player1.score++;
    2200:	83 c0 01             	add    $0x1,%eax
        game->ball.vel_x = -BALL_SPEED;
    2203:	c7 43 0c 00 00 40 c0 	movl   $0xc0400000,0xc(%rbx)
        game->player1.score++;
    220a:	89 43 1c             	mov    %eax,0x1c(%rbx)
        game->ball.x = WINDOW_WIDTH / 2;
    220d:	48 89 53 04          	mov    %rdx,0x4(%rbx)
    if (game->player1.score >= 5 || game->player2.score >= 5) {
    2211:	83 f8 04             	cmp    $0x4,%eax
    2214:	7f 3a                	jg     2250 <_Z11update_gameP8GameData+0x150>
    2216:	83 7b 28 04          	cmpl   $0x4,0x28(%rbx)
        game->winner = (game->player1.score >= 5) ? 1 : 2;
    221a:	b8 02 00 00 00       	mov    $0x2,%eax
    if (game->player1.score >= 5 || game->player2.score >= 5) {
    221f:	7f 34                	jg     2255 <_Z11update_gameP8GameData+0x155>
    pthread_mutex_unlock(&game->mutex);
    2221:	48 89 ef             	mov    %rbp,%rdi
    2224:	e8 07 f1 ff ff       	call   1330 <pthread_mutex_unlock@plt>
}
    2229:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    222e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    2235:	00 00 
    2237:	0f 85 7d 00 00 00    	jne    22ba <_Z11update_gameP8GameData+0x1ba>
    223d:	48 83 c4 40          	add    $0x40,%rsp
    2241:	5b                   	pop    %rbx
    2242:	5d                   	pop    %rbp
    2243:	41 5c                	pop    %r12
    2245:	c3                   	ret
    2246:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    224d:	00 00 00 
        game->winner = (game->player1.score >= 5) ? 1 : 2;
    2250:	b8 01 00 00 00       	mov    $0x1,%eax
        game->state = GAME_OVER;
    2255:	c7 03 03 00 00 00    	movl   $0x3,(%rbx)
        game->winner = (game->player1.score >= 5) ? 1 : 2;
    225b:	89 43 2c             	mov    %eax,0x2c(%rbx)
    225e:	eb c1                	jmp    2221 <_Z11update_gameP8GameData+0x121>
        pthread_mutex_unlock(&game->mutex);
    2260:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    2265:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    226c:	00 00 
    226e:	75 4a                	jne    22ba <_Z11update_gameP8GameData+0x1ba>
}
    2270:	48 83 c4 40          	add    $0x40,%rsp
        pthread_mutex_unlock(&game->mutex);
    2274:	48 89 ef             	mov    %rbp,%rdi
}
    2277:	5b                   	pop    %rbx
    2278:	5d                   	pop    %rbp
    2279:	41 5c                	pop    %r12
        pthread_mutex_unlock(&game->mutex);
    227b:	e9 b0 f0 ff ff       	jmp    1330 <pthread_mutex_unlock@plt>
        game->ball.x = WINDOW_WIDTH / 2;
    2280:	48 8b 15 09 11 00 00 	mov    0x1109(%rip),%rdx        # 3390 <_IO_stdin_used+0x390>
        game->player2.score++;
    2287:	83 43 28 01          	addl   $0x1,0x28(%rbx)
        game->ball.vel_x = BALL_SPEED;
    228b:	c7 43 0c 00 00 40 40 	movl   $0x40400000,0xc(%rbx)
        game->ball.x = WINDOW_WIDTH / 2;
    2292:	48 89 53 04          	mov    %rdx,0x4(%rbx)
    if (game->ball.x > WINDOW_WIDTH) {
    2296:	e9 76 ff ff ff       	jmp    2211 <_Z11update_gameP8GameData+0x111>
    229b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        SDL_HasIntersection(&ball_rect, &p2_rect)) {
    22a0:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    22a5:	4c 89 e7             	mov    %r12,%rdi
    22a8:	e8 c3 f0 ff ff       	call   1370 <SDL_HasIntersection@plt>
    if (SDL_HasIntersection(&ball_rect, &p1_rect) || 
    22ad:	85 c0                	test   %eax,%eax
    22af:	0f 85 15 ff ff ff    	jne    21ca <_Z11update_gameP8GameData+0xca>
    22b5:	e9 21 ff ff ff       	jmp    21db <_Z11update_gameP8GameData+0xdb>
}
    22ba:	e8 c1 f0 ff ff       	call   1380 <__stack_chk_fail@plt>
    22bf:	90                   	nop

00000000000022c0 <_Z12handle_inputP8GameDataPKh>:
void handle_input(GameData* game, const Uint8* keystate) {
    22c0:	f3 0f 1e fa          	endbr64
    22c4:	41 54                	push   %r12
    pthread_mutex_lock(&game->mutex);
    22c6:	4c 8d 67 40          	lea    0x40(%rdi),%r12
void handle_input(GameData* game, const Uint8* keystate) {
    22ca:	55                   	push   %rbp
    22cb:	48 89 f5             	mov    %rsi,%rbp
    22ce:	53                   	push   %rbx
    22cf:	48 89 fb             	mov    %rdi,%rbx
    pthread_mutex_lock(&game->mutex);
    22d2:	4c 89 e7             	mov    %r12,%rdi
    22d5:	e8 06 f1 ff ff       	call   13e0 <pthread_mutex_lock@plt>
    if (keystate[SDL_SCANCODE_W] && game->player1.y > 0) {
    22da:	80 7d 1a 00          	cmpb   $0x0,0x1a(%rbp)
    22de:	74 1b                	je     22fb <_Z12handle_inputP8GameDataPKh+0x3b>
    22e0:	f3 0f 10 43 18       	movss  0x18(%rbx),%xmm0
    22e5:	66 0f ef c9          	pxor   %xmm1,%xmm1
    22e9:	0f 2f c1             	comiss %xmm1,%xmm0
    22ec:	76 0d                	jbe    22fb <_Z12handle_inputP8GameDataPKh+0x3b>
        game->player1.y -= PADDLE_SPEED;
    22ee:	f3 0f 5c 05 1e 0d 00 	subss  0xd1e(%rip),%xmm0        # 3014 <_IO_stdin_used+0x14>
    22f5:	00 
    22f6:	f3 0f 11 43 18       	movss  %xmm0,0x18(%rbx)
    if (keystate[SDL_SCANCODE_S] && game->player1.y < WINDOW_HEIGHT - PADDLE_HEIGHT) {
    22fb:	80 7d 16 00          	cmpb   $0x0,0x16(%rbp)
    22ff:	74 16                	je     2317 <_Z12handle_inputP8GameDataPKh+0x57>
    2301:	f3 0f 10 43 18       	movss  0x18(%rbx),%xmm0
    2306:	f3 0f 10 0d 0a 0d 00 	movss  0xd0a(%rip),%xmm1        # 3018 <_IO_stdin_used+0x18>
    230d:	00 
    230e:	0f 2f c8             	comiss %xmm0,%xmm1
    2311:	0f 87 f1 00 00 00    	ja     2408 <_Z12handle_inputP8GameDataPKh+0x148>
    if (keystate[SDL_SCANCODE_UP] && game->player2.y > 0) {
    2317:	80 7d 52 00          	cmpb   $0x0,0x52(%rbp)
    231b:	74 1b                	je     2338 <_Z12handle_inputP8GameDataPKh+0x78>
    231d:	f3 0f 10 43 24       	movss  0x24(%rbx),%xmm0
    2322:	66 0f ef c9          	pxor   %xmm1,%xmm1
    2326:	0f 2f c1             	comiss %xmm1,%xmm0
    2329:	76 0d                	jbe    2338 <_Z12handle_inputP8GameDataPKh+0x78>
        game->player2.y -= PADDLE_SPEED;
    232b:	f3 0f 5c 05 e1 0c 00 	subss  0xce1(%rip),%xmm0        # 3014 <_IO_stdin_used+0x14>
    2332:	00 
    2333:	f3 0f 11 43 24       	movss  %xmm0,0x24(%rbx)
    if (keystate[SDL_SCANCODE_DOWN] && game->player2.y < WINDOW_HEIGHT - PADDLE_HEIGHT) {
    2338:	80 7d 51 00          	cmpb   $0x0,0x51(%rbp)
    233c:	74 16                	je     2354 <_Z12handle_inputP8GameDataPKh+0x94>
    233e:	f3 0f 10 43 24       	movss  0x24(%rbx),%xmm0
    2343:	f3 0f 10 0d cd 0c 00 	movss  0xccd(%rip),%xmm1        # 3018 <_IO_stdin_used+0x18>
    234a:	00 
    234b:	0f 2f c8             	comiss %xmm0,%xmm1
    234e:	0f 87 9c 00 00 00    	ja     23f0 <_Z12handle_inputP8GameDataPKh+0x130>
    if (keystate[SDL_SCANCODE_SPACE]) {
    2354:	80 7d 2c 00          	cmpb   $0x0,0x2c(%rbp)
    2358:	74 36                	je     2390 <_Z12handle_inputP8GameDataPKh+0xd0>
        if (game->state == GAME_MENU) {
    235a:	8b 03                	mov    (%rbx),%eax
    235c:	85 c0                	test   %eax,%eax
    235e:	75 18                	jne    2378 <_Z12handle_inputP8GameDataPKh+0xb8>
    2360:	b8 01 00 00 00       	mov    $0x1,%eax
            game->state = GAME_PAUSED;
    2365:	89 03                	mov    %eax,(%rbx)
}
    2367:	5b                   	pop    %rbx
    pthread_mutex_unlock(&game->mutex);
    2368:	4c 89 e7             	mov    %r12,%rdi
}
    236b:	5d                   	pop    %rbp
    236c:	41 5c                	pop    %r12
    pthread_mutex_unlock(&game->mutex);
    236e:	e9 bd ef ff ff       	jmp    1330 <pthread_mutex_unlock@plt>
    2373:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        } else if (game->state == GAME_PLAYING) {
    2378:	83 f8 01             	cmp    $0x1,%eax
    237b:	0f 84 9f 00 00 00    	je     2420 <_Z12handle_inputP8GameDataPKh+0x160>
        } else if (game->state == GAME_PAUSED) {
    2381:	83 f8 02             	cmp    $0x2,%eax
    2384:	74 da                	je     2360 <_Z12handle_inputP8GameDataPKh+0xa0>
    2386:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    238d:	00 00 00 
    if (keystate[SDL_SCANCODE_R] && game->state == GAME_OVER) {
    2390:	80 7d 15 00          	cmpb   $0x0,0x15(%rbp)
    2394:	74 d1                	je     2367 <_Z12handle_inputP8GameDataPKh+0xa7>
    2396:	83 3b 03             	cmpl   $0x3,(%rbx)
    2399:	75 cc                	jne    2367 <_Z12handle_inputP8GameDataPKh+0xa7>
    pthread_mutex_init(&game->mutex, NULL);
    239b:	4c 89 e7             	mov    %r12,%rdi
    239e:	31 f6                	xor    %esi,%esi
    23a0:	e8 4b f0 ff ff       	call   13f0 <pthread_mutex_init@plt>
    game->player1.x = 50;
    23a5:	48 8b 05 0c 10 00 00 	mov    0x100c(%rip),%rax        # 33b8 <_IO_stdin_used+0x3b8>
    pthread_mutex_unlock(&game->mutex);
    23ac:	4c 89 e7             	mov    %r12,%rdi
    game->state = GAME_MENU;
    23af:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
    game->running = 1;
    23b5:	c7 43 68 01 00 00 00 	movl   $0x1,0x68(%rbx)
    game->ball.x = WINDOW_WIDTH / 2;
    23bc:	0f 28 05 cd 0f 00 00 	movaps 0xfcd(%rip),%xmm0        # 3390 <_IO_stdin_used+0x390>
    game->player1.x = 50;
    23c3:	48 89 43 14          	mov    %rax,0x14(%rbx)
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    23c7:	48 8b 05 f2 0f 00 00 	mov    0xff2(%rip),%rax        # 33c0 <_IO_stdin_used+0x3c0>
    game->player1.score = 0;
    23ce:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    game->player2.x = WINDOW_WIDTH - 50 - PADDLE_WIDTH;
    23d5:	48 89 43 20          	mov    %rax,0x20(%rbx)
    game->player2.score = 0;
    23d9:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
    game->ball.x = WINDOW_WIDTH / 2;
    23e0:	0f 11 43 04          	movups %xmm0,0x4(%rbx)
}
    23e4:	5b                   	pop    %rbx
    23e5:	5d                   	pop    %rbp
    23e6:	41 5c                	pop    %r12
    pthread_mutex_unlock(&game->mutex);
    23e8:	e9 43 ef ff ff       	jmp    1330 <pthread_mutex_unlock@plt>
    23ed:	0f 1f 00             	nopl   (%rax)
        game->player2.y += PADDLE_SPEED;
    23f0:	f3 0f 58 05 1c 0c 00 	addss  0xc1c(%rip),%xmm0        # 3014 <_IO_stdin_used+0x14>
    23f7:	00 
    23f8:	f3 0f 11 43 24       	movss  %xmm0,0x24(%rbx)
    23fd:	e9 52 ff ff ff       	jmp    2354 <_Z12handle_inputP8GameDataPKh+0x94>
    2402:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        game->player1.y += PADDLE_SPEED;
    2408:	f3 0f 58 05 04 0c 00 	addss  0xc04(%rip),%xmm0        # 3014 <_IO_stdin_used+0x14>
    240f:	00 
    2410:	f3 0f 11 43 18       	movss  %xmm0,0x18(%rbx)
    2415:	e9 fd fe ff ff       	jmp    2317 <_Z12handle_inputP8GameDataPKh+0x57>
    241a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2420:	b8 02 00 00 00       	mov    $0x2,%eax
            game->state = GAME_PAUSED;
    2425:	89 03                	mov    %eax,(%rbx)
    if (keystate[SDL_SCANCODE_R] && game->state == GAME_OVER) {
    2427:	e9 3b ff ff ff       	jmp    2367 <_Z12handle_inputP8GameDataPKh+0xa7>
    242c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002430 <_Z11render_gameP12SDL_RendererP8GameData>:
void render_game(SDL_Renderer* renderer, GameData* game) {
    2430:	f3 0f 1e fa          	endbr64
    2434:	41 56                	push   %r14
    pthread_mutex_lock(&game->mutex);
    2436:	4c 8d 76 40          	lea    0x40(%rsi),%r14
void render_game(SDL_Renderer* renderer, GameData* game) {
    243a:	41 55                	push   %r13
    243c:	41 54                	push   %r12
        SDL_Rect line_rect = {WINDOW_WIDTH/2 - 2, y, 4, 10};
    243e:	49 bc 04 00 00 00 0a 	movabs $0xa00000004,%r12
    2445:	00 00 00 
void render_game(SDL_Renderer* renderer, GameData* game) {
    2448:	55                   	push   %rbp
    2449:	48 89 fd             	mov    %rdi,%rbp
    pthread_mutex_lock(&game->mutex);
    244c:	4c 89 f7             	mov    %r14,%rdi
void render_game(SDL_Renderer* renderer, GameData* game) {
    244f:	53                   	push   %rbx
    2450:	48 89 f3             	mov    %rsi,%rbx
    2453:	48 83 ec 50          	sub    $0x50,%rsp
    2457:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    245e:	00 00 
    2460:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    2465:	31 c0                	xor    %eax,%eax
    pthread_mutex_lock(&game->mutex);
    2467:	4c 8d 6c 24 30       	lea    0x30(%rsp),%r13
    246c:	e8 6f ef ff ff       	call   13e0 <pthread_mutex_lock@plt>
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    2471:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
    2477:	31 c9                	xor    %ecx,%ecx
    2479:	31 d2                	xor    %edx,%edx
    247b:	31 f6                	xor    %esi,%esi
    247d:	48 89 ef             	mov    %rbp,%rdi
    2480:	e8 3b ef ff ff       	call   13c0 <SDL_SetRenderDrawColor@plt>
    SDL_RenderClear(renderer);
    2485:	48 89 ef             	mov    %rbp,%rdi
    2488:	e8 d3 ee ff ff       	call   1360 <SDL_RenderClear@plt>
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    248d:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
    2493:	b9 ff 00 00 00       	mov    $0xff,%ecx
    2498:	48 89 ef             	mov    %rbp,%rdi
    249b:	ba ff 00 00 00       	mov    $0xff,%edx
    24a0:	be ff 00 00 00       	mov    $0xff,%esi
    24a5:	e8 16 ef ff ff       	call   13c0 <SDL_SetRenderDrawColor@plt>
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    24aa:	f3 0f 7e 43 14       	movq   0x14(%rbx),%xmm0
    SDL_RenderFillRect(renderer, &p1_rect);
    24af:	48 89 e6             	mov    %rsp,%rsi
    24b2:	48 89 ef             	mov    %rbp,%rdi
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    24b5:	48 8b 05 14 0f 00 00 	mov    0xf14(%rip),%rax        # 33d0 <_IO_stdin_used+0x3d0>
    24bc:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    24c0:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
    SDL_Rect p2_rect = {(int)game->player2.x, (int)game->player2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    24c5:	f3 0f 7e 43 20       	movq   0x20(%rbx),%xmm0
    SDL_Rect p1_rect = {(int)game->player1.x, (int)game->player1.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    24ca:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    SDL_Rect p2_rect = {(int)game->player2.x, (int)game->player2.y, PADDLE_WIDTH, PADDLE_HEIGHT};
    24cf:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    24d3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    24d8:	66 0f d6 44 24 10    	movq   %xmm0,0x10(%rsp)
    SDL_RenderFillRect(renderer, &p1_rect);
    24de:	e8 fd ed ff ff       	call   12e0 <SDL_RenderFillRect@plt>
    SDL_RenderFillRect(renderer, &p2_rect);
    24e3:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    24e8:	48 89 ef             	mov    %rbp,%rdi
    24eb:	e8 f0 ed ff ff       	call   12e0 <SDL_RenderFillRect@plt>
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    24f0:	f3 0f 7e 43 04       	movq   0x4(%rbx),%xmm0
    SDL_RenderFillRect(renderer, &ball_rect);
    24f5:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    24fa:	48 89 ef             	mov    %rbp,%rdi
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    24fd:	48 8b 05 c4 0e 00 00 	mov    0xec4(%rip),%rax        # 33c8 <_IO_stdin_used+0x3c8>
    for (int y = 0; y < WINDOW_HEIGHT; y += 20) {
    2504:	31 db                	xor    %ebx,%ebx
    SDL_Rect ball_rect = {(int)game->ball.x, (int)game->ball.y, BALL_SIZE, BALL_SIZE};
    2506:	f3 0f 5b c0          	cvttps2dq %xmm0,%xmm0
    250a:	66 0f d6 44 24 20    	movq   %xmm0,0x20(%rsp)
    2510:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    SDL_RenderFillRect(renderer, &ball_rect);
    2515:	e8 c6 ed ff ff       	call   12e0 <SDL_RenderFillRect@plt>
    for (int y = 0; y < WINDOW_HEIGHT; y += 20) {
    251a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        SDL_Rect line_rect = {WINDOW_WIDTH/2 - 2, y, 4, 10};
    2520:	89 5c 24 34          	mov    %ebx,0x34(%rsp)
        SDL_RenderFillRect(renderer, &line_rect);
    2524:	4c 89 ee             	mov    %r13,%rsi
    2527:	48 89 ef             	mov    %rbp,%rdi
    for (int y = 0; y < WINDOW_HEIGHT; y += 20) {
    252a:	83 c3 14             	add    $0x14,%ebx
        SDL_Rect line_rect = {WINDOW_WIDTH/2 - 2, y, 4, 10};
    252d:	c7 44 24 30 8e 01 00 	movl   $0x18e,0x30(%rsp)
    2534:	00 
    2535:	4c 89 64 24 38       	mov    %r12,0x38(%rsp)
        SDL_RenderFillRect(renderer, &line_rect);
    253a:	e8 a1 ed ff ff       	call   12e0 <SDL_RenderFillRect@plt>
    for (int y = 0; y < WINDOW_HEIGHT; y += 20) {
    253f:	81 fb 58 02 00 00    	cmp    $0x258,%ebx
    2545:	75 d9                	jne    2520 <_Z11render_gameP12SDL_RendererP8GameData+0xf0>
    pthread_mutex_unlock(&game->mutex);
    2547:	4c 89 f7             	mov    %r14,%rdi
    254a:	e8 e1 ed ff ff       	call   1330 <pthread_mutex_unlock@plt>
    SDL_RenderPresent(renderer);
    254f:	48 89 ef             	mov    %rbp,%rdi
    2552:	e8 49 ed ff ff       	call   12a0 <SDL_RenderPresent@plt>
}
    2557:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    255c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    2563:	00 00 
    2565:	75 0d                	jne    2574 <_Z11render_gameP12SDL_RendererP8GameData+0x144>
    2567:	48 83 c4 50          	add    $0x50,%rsp
    256b:	5b                   	pop    %rbx
    256c:	5d                   	pop    %rbp
    256d:	41 5c                	pop    %r12
    256f:	41 5d                	pop    %r13
    2571:	41 5e                	pop    %r14
    2573:	c3                   	ret
    2574:	e8 07 ee ff ff       	call   1380 <__stack_chk_fail@plt>

Desmontagem da seção .fini:

000000000000257c <_fini>:
    257c:	f3 0f 1e fa          	endbr64
    2580:	48 83 ec 08          	sub    $0x8,%rsp
    2584:	48 83 c4 08          	add    $0x8,%rsp
    2588:	c3                   	ret
